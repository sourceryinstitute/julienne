var tipuesearch = {"pages":[{"title":" Julienne ","text":"Julienne Julienne Spun off from Sourcery and inspired by Veggies , Julienne is a modern-Fortran unit-testing framework and utility for manipulating strings, including command lines and input/output format strings. \nThis repository's name derives from the term for vegetables sliced into thin strings: julienn vegetables.\nThis software repository captures the authors' most frequently used thin slice of the Veggies and Sourcery repositories while avoiding certain compiler limitations.\nJulienne achieves portability across compilers through minimalism and isolation.\nThus Julienne has no external dependencies and offers limited but widely useful capabilities.\nA need for unit testing support drive the creation of Julienne.\nThe string-handling capabilities are included primarily because they support Julienne's unit-testing code. Examples For examples of how to use Julienne, please see the examples subdirectory. Building and Testing GNU ( gfortran ) fpm test NAG ( nagfor ) fpm test --compiler nagfor --flag -fpp LLVM Flang Experimental fpm test --compiler flang-new --flag \"-mmlir -allow-assumed-rank\" where the flags -mmlir -allow-assumed-rank turn on LLVM Flang's experimental support for Fortran's assumed-rank dummy arguments.\nFlang's capabilities are evolving rapidly so we recommend building a recent version of the main branch of llvm-project.\nA script that might be helpful for doing so is in the handy-dandy repository. Documentation See our online documentation or build the documentation locally by installing FORD and executing ford ford.md Developer Info Berkeley Lab","tags":"home","loc":"index.html"},{"title":"test_result_t – Julienne ","text":"type, public :: test_result_t Encapsulate test descriptions and outcomes Inherits type~~test_result_t~~InheritsGraph type~test_result_t test_result_t type~string_t string_t type~test_result_t->type~string_t description_ characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), public :: description_ logical, public :: passed_ Constructor public        interface test_result_t private elemental module function construct_from_character(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) private elemental module function construct_from_string(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) Type-Bound Procedures procedure, public :: characterize interface private pure module function characterize(self) result(characterization) Implementation → The result is a character description of the test and its outcome Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable procedure, public :: description_contains interface private elemental module function description_contains(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical procedure, public :: passed interface private impure elemental module function passed(self) result(test_passed) Implementation → The result is true if and only if the test passed on all images Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical","tags":"","loc":"type/test_result_t.html"},{"title":"test_t – Julienne ","text":"type, public, abstract :: test_t Facilitate testing and test reporting Type-Bound Procedures procedure, public :: report interface private module subroutine report(test, passes, tests) Implementation → Print the test results and increment the tallies of passing tests and total tests Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests procedure( results_interface ), public, deferred, nopass :: results function results_interface() result(test_results) Prototype The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure Arguments None Return Value type( test_result_t ), allocatable, (:) procedure( subject_interface ), public, deferred, nopass :: subject pure function subject_interface() result(specimen) Prototype The result is the name of the test specimen (the subject of testing) Arguments None Return Value character(len=:), allocatable","tags":"","loc":"type/test_t.html"},{"title":"command_line_t – Julienne ","text":"type, public :: command_line_t Type-Bound Procedures procedure, public, nopass :: argument_present interface private module function argument_present(acceptable_argument) result(found) Implementation → result is .true. only if a command-line argument matches an element of this function's argument Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical procedure, public, nopass :: flag_value interface private module function flag_value(flag) Implementation → result is the value passed adjacent to a command-line flag Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","loc":"type/command_line_t.html"},{"title":"test_description_t – Julienne ","text":"type, public :: test_description_t Encapsulate test descriptions and test-functions Inherits type~~test_description_t~~InheritsGraph type~test_description_t test_description_t type~string_t string_t type~test_description_t->type~string_t description_ characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private :: description_ procedure( test_function_i ), private, pointer, nopass :: test_function_ => null() Constructor public        interface test_description_t private module function construct_from_character(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) private module function construct_from_string_t(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) Type-Bound Procedures procedure, public :: contains_text interface private impure elemental module function contains_text(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical generic, public :: operator(==) => equals private  interface equals () Arguments None procedure, public :: run interface private impure elemental module function run(self) result(test_result) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) procedure, private :: equals interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → The result is .true. if the components of the lhs & rhs are equal Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"type/test_description_t.html"},{"title":"file_t – Julienne ","text":"type, public :: file_t Inherits type~~file_t~~InheritsGraph type~file_t file_t type~string_t string_t type~file_t->type~string_t lines_ characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: lines_ (:) Constructor public        interface file_t private pure module function construct(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) private module function read_lines(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) Type-Bound Procedures procedure, public :: lines interface private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) procedure, public :: write_lines interface private impure elemental module subroutine write_lines(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in), optional :: file_name","tags":"","loc":"type/file_t.html"},{"title":"string_t – Julienne ","text":"type, public, extends(characterizable_t) :: string_t Inherits type~~string_t~~InheritsGraph type~string_t string_t characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Inherited by type~~string_t~~InheritedByGraph type~string_t string_t type~file_t file_t type~file_t->type~string_t lines_ type~test_description_t test_description_t type~test_description_t->type~string_t description_ type~test_result_t test_result_t type~test_result_t->type~string_t description_ type~vector_test_description_t vector_test_description_t type~vector_test_description_t->type~string_t description_vector_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: string_ Constructor public        interface string_t private elemental module function construct(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) Type-Bound Procedures procedure, public :: as_character interface private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable generic, public :: assignment(= ) => assign_string_t_to_character , assign_character_to_string_t private  interface assign_string_t_to_character () Arguments None private  interface assign_character_to_string_t () Arguments None procedure, public :: base_name interface private pure module function base_name(self) result(base) Implementation → result contains all characters in file_name before the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) procedure, public :: file_extension interface private elemental module function file_extension(self) result(extension) Implementation → result contains all characters in file_name after the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) procedure, public :: get_json_key interface private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) generic, public :: get_json_value => get_json_integer_array , get_json_logical , get_json_integer , get_json_string , get_json_real , get_json_real_array private  interface get_json_integer_array () Arguments None private  interface get_json_logical () Arguments None private  interface get_json_integer () Arguments None private  interface get_json_string () Arguments None private  interface get_json_real () Arguments None private  interface get_json_real_array () Arguments None procedure, public :: is_allocated interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical generic, public :: operator(//) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t private  interface string_t_cat_string_t () Arguments None private  interface string_t_cat_character () Arguments None private  interface character_cat_string_t () Arguments None generic, public :: operator(/=) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t private  interface string_t_ne_string_t () Arguments None private  interface string_t_ne_character () Arguments None private  interface character_ne_string_t () Arguments None generic, public :: operator(==) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t private  interface string_t_eq_string_t () Arguments None private  interface string_t_eq_character () Arguments None private  interface character_eq_string_t () Arguments None generic, public :: string => as_character private  interface as_character () Arguments None procedure, private :: assign_character_to_string_t interface private pure module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs procedure, private, pass(rhs) :: assign_string_t_to_character interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs procedure, private, pass(rhs) :: character_cat_string_t interface private pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) procedure, private, pass(rhs) :: character_eq_string_t interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private, pass(rhs) :: character_ne_string_t interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private :: get_json_integer interface private pure module function get_json_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer procedure, private :: get_json_integer_array interface private pure module function get_json_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) procedure, private :: get_json_logical interface private elemental module function get_json_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical procedure, private :: get_json_real interface private pure module function get_json_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real procedure, private :: get_json_real_array interface private pure module function get_json_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) procedure, private :: get_json_string interface private elemental module function get_json_string(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) procedure, private :: string_t_cat_character interface private pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) procedure, private :: string_t_cat_string_t interface private pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) procedure, private :: string_t_eq_character interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical procedure, private :: string_t_eq_string_t interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private :: string_t_ne_character interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical procedure, private :: string_t_ne_string_t interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"type/string_t.html"},{"title":"vector_function_strategy_t – Julienne ","text":"type, public, abstract :: vector_function_strategy_t Inherited by type~~vector_function_strategy_t~~InheritedByGraph type~vector_function_strategy_t vector_function_strategy_t type~vector_test_description_t vector_test_description_t type~vector_test_description_t->type~vector_function_strategy_t vector_function_strategy_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type-Bound Procedures procedure( vector_function_i ), public, deferred, nopass :: vector_function function vector_function_i() result(passes) Prototype Arguments None Return Value logical, allocatable, (:)","tags":"","loc":"type/vector_function_strategy_t.html"},{"title":"vector_test_description_t – Julienne ","text":"type, public :: vector_test_description_t Encapsulate test descriptions and vector-valued test functions Inherits type~~vector_test_description_t~~InheritsGraph type~vector_test_description_t vector_test_description_t type~string_t string_t type~vector_test_description_t->type~string_t description_vector_ type~vector_function_strategy_t vector_function_strategy_t type~vector_test_description_t->type~vector_function_strategy_t vector_function_strategy_ characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: description_vector_ (:) class( vector_function_strategy_t ), private, allocatable :: vector_function_strategy_ Constructor public        interface vector_test_description_t private module function construct(description_vector, vector_function_strategy) result(vector_test_description) Implementation → The result is a vector_test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description_vector (:) class( vector_function_strategy_t ), intent(in) :: vector_function_strategy Return Value type( vector_test_description_t ) Type-Bound Procedures procedure, public :: contains_text interface private module function contains_text(self, substring) result(match_vector) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) procedure, public :: run interface private impure module function run(self) result(test_results) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:)","tags":"","loc":"type/vector_test_description_t.html"},{"title":"bin_t – Julienne ","text":"type, public :: bin_t encapsulate a range of item numbers associated with a bin Components Type Visibility Attributes Name Initial integer, private :: first_ integer, private :: last_ Constructor public        interface bin_t private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) Type-Bound Procedures procedure, public :: first interface private elemental module function first(self) result(first_item_number) Implementation → the result is the first item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer procedure, public :: last interface private elemental module function last(self) result(last_item_number) Implementation → the result is the last item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","loc":"type/bin_t.html"},{"title":"results_interface – Julienne","text":"interface private  function results_interface() result(test_results) Arguments None Return Value type( test_result_t ),allocatable,(:) Description The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure","tags":"","loc":"interface/results_interface.html"},{"title":"subject_interface – Julienne","text":"interface private pure function subject_interface() result(specimen) Arguments None Return Value character(len=:),allocatable Description The result is the name of the test specimen (the subject of testing)","tags":"","loc":"interface/subject_interface.html"},{"title":"test_function_i – Julienne","text":"interface public  function test_function_i() result(passes) Arguments None Return Value logical","tags":"","loc":"interface/test_function_i.html"},{"title":"vector_function_i – Julienne","text":"interface private  function vector_function_i() result(passes) Arguments None Return Value logical,allocatable,(:)","tags":"","loc":"interface/vector_function_i.html"},{"title":"test_result_t – Julienne","text":"public interface test_result_t Functions private elemental module function construct_from_character(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) private elemental module function construct_from_string(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t )","tags":"","loc":"interface/test_result_t.html"},{"title":"characterize – Julienne","text":"interface private pure module function characterize(self) result(characterization) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:),allocatable Description The result is a character description of the test and its outcome","tags":"","loc":"interface/characterize.html"},{"title":"description_contains – Julienne","text":"interface private elemental module function description_contains(self, substring) result(substring_found) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Description The result is true if and only if the test description contains the substring","tags":"","loc":"interface/description_contains.html"},{"title":"passed – Julienne","text":"interface private impure elemental module function passed(self) result(test_passed) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Description The result is true if and only if the test passed on all images","tags":"","loc":"interface/passed.html"},{"title":"report – Julienne","text":"interface private module subroutine report(test, passes, tests) Implementation → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests Description Print the test results and increment the tallies of passing tests and total tests","tags":"","loc":"interface/report.html"},{"title":"argument_present – Julienne","text":"interface Called by interface~~argument_present~~CalledByGraph interface~argument_present command_line_t%argument_present program~check_command_line_argument check_command_line_argument program~check_command_line_argument->interface~argument_present Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private module function argument_present(acceptable_argument) result(found) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical Description result is .true. only if a command-line argument matches an element of this function's argument","tags":"","loc":"interface/argument_present.html"},{"title":"flag_value – Julienne","text":"interface Called by interface~~flag_value~~CalledByGraph interface~flag_value command_line_t%flag_value program~get_flag_value get_flag_value program~get_flag_value->interface~flag_value program~handle_missing_flag handle_missing_flag program~handle_missing_flag->interface~flag_value Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private module function flag_value(flag) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:),allocatable Description result is the value passed adjacent to a command-line flag","tags":"","loc":"interface/flag_value.html"},{"title":"test_description_t – Julienne","text":"public interface test_description_t Functions private module function construct_from_character(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) private module function construct_from_string_t(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t )","tags":"","loc":"interface/test_description_t.html"},{"title":"contains_text – Julienne","text":"interface private impure elemental module function contains_text(self, substring) result(match) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Description The result is .true. if the test description includes the value of substring","tags":"","loc":"interface/contains_text.html"},{"title":"equals – Julienne","text":"interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical Description The result is .true. if the components of the lhs & rhs are equal","tags":"","loc":"interface/equals.html"},{"title":"run – Julienne","text":"interface private impure elemental module function run(self) result(test_result) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) Description The result encapsulates the test description and test outcome","tags":"","loc":"interface/run.html"},{"title":"file_t – Julienne","text":"public interface file_t Functions private pure module function construct(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) private module function read_lines(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t )","tags":"","loc":"interface/file_t.html"},{"title":"lines – Julienne","text":"interface private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ),allocatable,(:)","tags":"","loc":"interface/lines.html"},{"title":"write_lines – Julienne","text":"interface private impure elemental module subroutine write_lines(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in), optional :: file_name","tags":"","loc":"interface/write_lines.html"},{"title":"separated_values – Julienne","text":"interface public pure module function separated_values(separator, mold) result(format_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:),allocatable","tags":"","loc":"interface/separated_values.html"},{"title":"array_of_strings – Julienne","text":"interface public pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ),allocatable,(:)","tags":"","loc":"interface/array_of_strings.html"},{"title":"operator(.cat.) – Julienne","text":"public interface operator(.cat.) Functions private pure module function concatenate_elements(strings) result(concatenated_strings) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t )","tags":"","loc":"interface/operator(.cat.).html"},{"title":"string_t – Julienne","text":"public interface string_t Functions private elemental module function construct(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t )","tags":"","loc":"interface/string_t.html"},{"title":"as_character – Julienne","text":"interface Called by interface~~as_character~~CalledByGraph interface~as_character string_t%as_character none~string string_t%string none~string->interface~as_character proc~assign_string_t_to_character assign_string_t_to_character proc~assign_string_t_to_character->none~string proc~base_name base_name proc~base_name->none~string proc~character_eq_string_t character_eq_string_t proc~character_eq_string_t->none~string proc~character_ne_string_t character_ne_string_t proc~character_ne_string_t->none~string proc~characterize characterize proc~characterize->none~string proc~concatenate_elements concatenate_elements proc~concatenate_elements->none~string proc~contains_text contains_text proc~contains_text->none~string proc~contains_text~2 contains_text proc~contains_text~2->none~string proc~description_contains description_contains proc~description_contains->none~string proc~file_extension file_extension proc~file_extension->none~string proc~get_json_integer get_json_integer proc~get_json_integer->none~string proc~get_json_key get_json_key proc~get_json_key->none~string proc~get_json_logical get_json_logical proc~get_json_logical->none~string proc~get_json_real get_json_real proc~get_json_real->none~string proc~get_json_real_array get_json_real_array proc~get_json_real_array->none~string proc~get_json_string get_json_string proc~get_json_string->none~string proc~read_lines read_lines proc~read_lines->none~string proc~string_t_eq_character string_t_eq_character proc~string_t_eq_character->none~string proc~string_t_eq_string_t string_t_eq_string_t proc~string_t_eq_string_t->none~string proc~string_t_ne_character string_t_ne_character proc~string_t_ne_character->none~string proc~string_t_ne_string_t string_t_ne_string_t proc~string_t_ne_string_t->none~string proc~write_lines write_lines proc~write_lines->none~string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:),allocatable","tags":"","loc":"interface/as_character.html"},{"title":"assign_character_to_string_t – Julienne","text":"interface private pure module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs","tags":"","loc":"interface/assign_character_to_string_t.html"},{"title":"assign_string_t_to_character – Julienne","text":"interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs","tags":"","loc":"interface/assign_string_t_to_character.html"},{"title":"base_name – Julienne","text":"interface private pure module function base_name(self) result(base) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Description result contains all characters in file_name before the last dot (.)","tags":"","loc":"interface/base_name.html"},{"title":"character_cat_string_t – Julienne","text":"interface private pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"interface/character_cat_string_t.html"},{"title":"character_eq_string_t – Julienne","text":"interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/character_eq_string_t.html"},{"title":"character_ne_string_t – Julienne","text":"interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/character_ne_string_t.html"},{"title":"file_extension – Julienne","text":"interface private elemental module function file_extension(self) result(extension) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Description result contains all characters in file_name after the last dot (.)","tags":"","loc":"interface/file_extension.html"},{"title":"get_json_integer – Julienne","text":"interface private pure module function get_json_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer","tags":"","loc":"interface/get_json_integer.html"},{"title":"get_json_integer_array – Julienne","text":"interface private pure module function get_json_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer,allocatable,(:)","tags":"","loc":"interface/get_json_integer_array.html"},{"title":"get_json_key – Julienne","text":"interface Called by interface~~get_json_key~~CalledByGraph interface~get_json_key string_t%get_json_key proc~get_json_integer get_json_integer proc~get_json_integer->interface~get_json_key proc~get_json_logical get_json_logical proc~get_json_logical->interface~get_json_key proc~get_json_real get_json_real proc~get_json_real->interface~get_json_key proc~get_json_real_array get_json_real_array proc~get_json_real_array->interface~get_json_key proc~get_json_string get_json_string proc~get_json_string->interface~get_json_key Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t )","tags":"","loc":"interface/get_json_key.html"},{"title":"get_json_logical – Julienne","text":"interface private elemental module function get_json_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical","tags":"","loc":"interface/get_json_logical.html"},{"title":"get_json_real – Julienne","text":"interface private pure module function get_json_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real","tags":"","loc":"interface/get_json_real.html"},{"title":"get_json_real_array – Julienne","text":"interface Called by interface~~get_json_real_array~~CalledByGraph interface~get_json_real_array string_t%get_json_real_array proc~get_json_integer_array get_json_integer_array proc~get_json_integer_array->interface~get_json_real_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_json_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real,allocatable,(:)","tags":"","loc":"interface/get_json_real_array.html"},{"title":"get_json_string – Julienne","text":"interface private elemental module function get_json_string(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t )","tags":"","loc":"interface/get_json_string.html"},{"title":"is_allocated – Julienne","text":"interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical","tags":"","loc":"interface/is_allocated.html"},{"title":"string_t_cat_character – Julienne","text":"interface private pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"interface/string_t_cat_character.html"},{"title":"string_t_cat_string_t – Julienne","text":"interface private pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"interface/string_t_cat_string_t.html"},{"title":"string_t_eq_character – Julienne","text":"interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/string_t_eq_character.html"},{"title":"string_t_eq_string_t – Julienne","text":"interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/string_t_eq_string_t.html"},{"title":"string_t_ne_character – Julienne","text":"interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/string_t_ne_character.html"},{"title":"string_t_ne_string_t – Julienne","text":"interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/string_t_ne_string_t.html"},{"title":"vector_test_description_t – Julienne","text":"public interface vector_test_description_t Functions private module function construct(description_vector, vector_function_strategy) result(vector_test_description) Implementation → The result is a vector_test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description_vector (:) class( vector_function_strategy_t ), intent(in) :: vector_function_strategy Return Value type( vector_test_description_t )","tags":"","loc":"interface/vector_test_description_t.html"},{"title":"contains_text – Julienne","text":"interface private module function contains_text(self, substring) result(match_vector) Implementation → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical,allocatable,(:) Description The result is .true. if the test description includes the value of substring","tags":"","loc":"interface/contains_text~2.html"},{"title":"run – Julienne","text":"interface private impure module function run(self) result(test_results) Implementation → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ),allocatable,(:) Description The result encapsulates the test description and test outcome","tags":"","loc":"interface/run~2.html"},{"title":"bin_t – Julienne","text":"public interface bin_t Functions private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t )","tags":"","loc":"interface/bin_t.html"},{"title":"first – Julienne","text":"interface private elemental module function first(self) result(first_item_number) Implementation → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Description the result is the first item number associated with the given bin","tags":"","loc":"interface/first.html"},{"title":"last – Julienne","text":"interface private elemental module function last(self) result(last_item_number) Implementation → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Description the result is the last item number associated with the given bin","tags":"","loc":"interface/last.html"},{"title":"co_all – Julienne","text":"interface Called by interface~~co_all~~CalledByGraph interface~co_all co_all proc~passed passed proc~passed->interface~co_all proc~report report proc~report->interface~co_all Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. public impure elemental module subroutine co_all(boolean) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean Description If any image in a team calls this subroutine, then every image in the \nthe same team must call this subroutine.  This subroutine sets the\n\"boolean\" argument .true. if it is true in all participating images\nupon entry and .false. otherwise.","tags":"","loc":"interface/co_all.html"},{"title":"construct – Julienne","text":"module procedure construct module function construct(description_vector, vector_function_strategy) result(vector_test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description_vector (:) class( vector_function_strategy_t ), intent(in) :: vector_function_strategy Return Value type( vector_test_description_t )","tags":"","loc":"proc/construct.html"},{"title":"contains_text – Julienne","text":"module procedure contains_text module function contains_text(self, substring) result(match_vector) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) Calls proc~~contains_text~~CallsGraph proc~contains_text contains_text none~string string_t%string proc~contains_text->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/contains_text.html"},{"title":"run – Julienne","text":"module procedure run impure module function run(self) result(test_results) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:) Calls proc~~run~~CallsGraph proc~run run assert assert proc~run->assert vector_function vector_function proc~run->vector_function Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/run.html"},{"title":"construct – Julienne","text":"module procedure construct pure module function construct(lines) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t )","tags":"","loc":"proc/construct~2.html"},{"title":"lines – Julienne","text":"module procedure lines pure module function lines(self) result(my_lines) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:)","tags":"","loc":"proc/lines.html"},{"title":"read_lines – Julienne","text":"module procedure read_lines module function read_lines(file_name) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) Calls proc~~read_lines~~CallsGraph proc~read_lines read_lines assert assert proc~read_lines->assert none~string string_t%string proc~read_lines->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/read_lines.html"},{"title":"write_lines – Julienne","text":"module procedure write_lines impure elemental module subroutine write_lines(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in), optional :: file_name Calls proc~~write_lines~~CallsGraph proc~write_lines write_lines assert assert proc~write_lines->assert none~string string_t%string proc~write_lines->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/write_lines.html"},{"title":"construct – Julienne","text":"module procedure construct elemental module function construct(num_items, num_bins, bin_number) result(bin) Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) Calls proc~~construct~3~~CallsGraph proc~construct~3 construct assert assert proc~construct~3->assert intrinsic_array_t intrinsic_array_t proc~construct~3->intrinsic_array_t Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/construct~3.html"},{"title":"first – Julienne","text":"module procedure first elemental module function first(self) result(first_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","loc":"proc/first.html"},{"title":"last – Julienne","text":"module procedure last elemental module function last(self) result(last_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","loc":"proc/last.html"},{"title":"separated_values – Julienne","text":"module procedure separated_values pure module function separated_values(separator, mold) result(format_string) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","loc":"proc/separated_values.html"},{"title":"array_of_strings – Julienne","text":"module procedure array_of_strings pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:)","tags":"","loc":"proc/array_of_strings.html"},{"title":"as_character – Julienne","text":"module procedure as_character pure module function as_character(self) result(raw_string) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable","tags":"","loc":"proc/as_character.html"},{"title":"assign_character_to_string_t – Julienne","text":"module procedure assign_character_to_string_t pure module subroutine assign_character_to_string_t(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs","tags":"","loc":"proc/assign_character_to_string_t.html"},{"title":"assign_string_t_to_character – Julienne","text":"module procedure assign_string_t_to_character pure module subroutine assign_string_t_to_character(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs Calls proc~~assign_string_t_to_character~~CallsGraph proc~assign_string_t_to_character assign_string_t_to_character none~string string_t%string proc~assign_string_t_to_character->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/assign_string_t_to_character.html"},{"title":"base_name – Julienne","text":"module procedure base_name pure module function base_name(self) result(base) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~base_name~~CallsGraph proc~base_name base_name none~string string_t%string proc~base_name->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/base_name.html"},{"title":"character_cat_string_t – Julienne","text":"module procedure character_cat_string_t pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"proc/character_cat_string_t.html"},{"title":"character_eq_string_t – Julienne","text":"module procedure character_eq_string_t elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~character_eq_string_t~~CallsGraph proc~character_eq_string_t character_eq_string_t none~string string_t%string proc~character_eq_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/character_eq_string_t.html"},{"title":"character_ne_string_t – Julienne","text":"module procedure character_ne_string_t elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~character_ne_string_t~~CallsGraph proc~character_ne_string_t character_ne_string_t none~string string_t%string proc~character_ne_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/character_ne_string_t.html"},{"title":"concatenate_elements – Julienne","text":"module procedure concatenate_elements pure module function concatenate_elements(strings) result(concatenated_strings) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) Calls proc~~concatenate_elements~~CallsGraph proc~concatenate_elements concatenate_elements none~string string_t%string proc~concatenate_elements->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/concatenate_elements.html"},{"title":"construct – Julienne","text":"module procedure construct elemental module function construct(string) result(new_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t )","tags":"","loc":"proc/construct~4.html"},{"title":"file_extension – Julienne","text":"module procedure file_extension elemental module function file_extension(self) result(extension) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~file_extension~~CallsGraph proc~file_extension file_extension none~string string_t%string proc~file_extension->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/file_extension.html"},{"title":"from_default_integer – Julienne","text":"module procedure from_default_integer elemental module function from_default_integer(i) result(string) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t )","tags":"","loc":"proc/from_default_integer.html"},{"title":"from_real – Julienne","text":"module procedure from_real elemental module function from_real(x) result(string) Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t )","tags":"","loc":"proc/from_real.html"},{"title":"get_json_integer – Julienne","text":"module procedure get_json_integer pure module function get_json_integer(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer Calls proc~~get_json_integer~~CallsGraph proc~get_json_integer get_json_integer assert assert proc~get_json_integer->assert interface~get_json_key string_t%get_json_key proc~get_json_integer->interface~get_json_key none~string string_t%string proc~get_json_integer->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_integer.html"},{"title":"get_json_integer_array – Julienne","text":"module procedure get_json_integer_array pure module function get_json_integer_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) Calls proc~~get_json_integer_array~~CallsGraph proc~get_json_integer_array get_json_integer_array interface~get_json_real_array string_t%get_json_real_array proc~get_json_integer_array->interface~get_json_real_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_integer_array.html"},{"title":"get_json_key – Julienne","text":"module procedure get_json_key elemental module function get_json_key(self) result(unquoted_key) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~get_json_key~~CallsGraph proc~get_json_key get_json_key none~string string_t%string proc~get_json_key->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_key.html"},{"title":"get_json_logical – Julienne","text":"module procedure get_json_logical elemental module function get_json_logical(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical Calls proc~~get_json_logical~~CallsGraph proc~get_json_logical get_json_logical assert assert proc~get_json_logical->assert interface~get_json_key string_t%get_json_key proc~get_json_logical->interface~get_json_key none~string string_t%string proc~get_json_logical->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_logical.html"},{"title":"get_json_real – Julienne","text":"module procedure get_json_real pure module function get_json_real(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real Calls proc~~get_json_real~~CallsGraph proc~get_json_real get_json_real assert assert proc~get_json_real->assert interface~get_json_key string_t%get_json_key proc~get_json_real->interface~get_json_key none~string string_t%string proc~get_json_real->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_real.html"},{"title":"get_json_real_array – Julienne","text":"module procedure get_json_real_array pure module function get_json_real_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) Calls proc~~get_json_real_array~~CallsGraph proc~get_json_real_array get_json_real_array assert assert proc~get_json_real_array->assert interface~get_json_key string_t%get_json_key proc~get_json_real_array->interface~get_json_key none~string string_t%string proc~get_json_real_array->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_real_array.html"},{"title":"get_json_string – Julienne","text":"module procedure get_json_string elemental module function get_json_string(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) Calls proc~~get_json_string~~CallsGraph proc~get_json_string get_json_string assert assert proc~get_json_string->assert interface~get_json_key string_t%get_json_key proc~get_json_string->interface~get_json_key none~string string_t%string proc~get_json_string->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_string.html"},{"title":"is_allocated – Julienne","text":"module procedure is_allocated elemental module function is_allocated(self) result(string_allocated) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical","tags":"","loc":"proc/is_allocated.html"},{"title":"string_t_cat_character – Julienne","text":"module procedure string_t_cat_character pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"proc/string_t_cat_character.html"},{"title":"string_t_cat_string_t – Julienne","text":"module procedure string_t_cat_string_t pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"proc/string_t_cat_string_t.html"},{"title":"string_t_eq_character – Julienne","text":"module procedure string_t_eq_character elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical Calls proc~~string_t_eq_character~~CallsGraph proc~string_t_eq_character string_t_eq_character none~string string_t%string proc~string_t_eq_character->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/string_t_eq_character.html"},{"title":"string_t_eq_string_t – Julienne","text":"module procedure string_t_eq_string_t elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~string_t_eq_string_t~~CallsGraph proc~string_t_eq_string_t string_t_eq_string_t none~string string_t%string proc~string_t_eq_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/string_t_eq_string_t.html"},{"title":"string_t_ne_character – Julienne","text":"module procedure string_t_ne_character elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical Calls proc~~string_t_ne_character~~CallsGraph proc~string_t_ne_character string_t_ne_character none~string string_t%string proc~string_t_ne_character->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/string_t_ne_character.html"},{"title":"string_t_ne_string_t – Julienne","text":"module procedure string_t_ne_string_t elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~string_t_ne_string_t~~CallsGraph proc~string_t_ne_string_t string_t_ne_string_t none~string string_t%string proc~string_t_ne_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/string_t_ne_string_t.html"},{"title":"characterize – Julienne","text":"module procedure characterize pure module function characterize(self) result(characterization) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable Calls proc~~characterize~~CallsGraph proc~characterize characterize none~string string_t%string proc~characterize->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/characterize.html"},{"title":"construct_from_character – Julienne","text":"module procedure construct_from_character elemental module function construct_from_character(description, passed) result(test_result) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t )","tags":"","loc":"proc/construct_from_character.html"},{"title":"construct_from_string – Julienne","text":"module procedure construct_from_string elemental module function construct_from_string(description, passed) result(test_result) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t )","tags":"","loc":"proc/construct_from_string.html"},{"title":"description_contains – Julienne","text":"module procedure description_contains elemental module function description_contains(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Calls proc~~description_contains~~CallsGraph proc~description_contains description_contains none~string string_t%string proc~description_contains->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/description_contains.html"},{"title":"passed – Julienne","text":"module procedure passed impure elemental module function passed(self) result(test_passed) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Calls proc~~passed~~CallsGraph proc~passed passed interface~co_all co_all proc~passed->interface~co_all Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/passed.html"},{"title":"report – Julienne","text":"module procedure report module subroutine report(test, passes, tests) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests Calls proc~~report~~CallsGraph proc~report report characterize characterize proc~report->characterize flag_value flag_value proc~report->flag_value interface~co_all co_all proc~report->interface~co_all passed passed proc~report->passed passing_tests passing_tests proc~report->passing_tests results results proc~report->results subject subject proc~report->subject Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/report.html"},{"title":"argument_present – Julienne","text":"module procedure argument_present module function argument_present(acceptable_argument) result(found) Interface → list of acceptable arguments\nsample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS and slashes support Windows Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical Calls proc~~argument_present~~CallsGraph proc~argument_present argument_present [] [] proc~argument_present->[] Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/argument_present.html"},{"title":"flag_value – Julienne","text":"module procedure flag_value module function flag_value(flag) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","loc":"proc/flag_value.html"},{"title":"co_all – Julienne","text":"module procedure co_all impure elemental module subroutine co_all(boolean) Interface → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","loc":"proc/co_all.html"},{"title":"construct_from_character – Julienne","text":"module procedure construct_from_character module function construct_from_character(description, test_function) result(test_description) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t )","tags":"","loc":"proc/construct_from_character~2.html"},{"title":"construct_from_string_t – Julienne","text":"module procedure construct_from_string_t module function construct_from_string_t(description, test_function) result(test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t )","tags":"","loc":"proc/construct_from_string_t.html"},{"title":"contains_text – Julienne","text":"module procedure contains_text impure elemental module function contains_text(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Calls proc~~contains_text~2~~CallsGraph proc~contains_text~2 contains_text none~string string_t%string proc~contains_text~2->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/contains_text~2.html"},{"title":"equals – Julienne","text":"module procedure equals elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"proc/equals.html"},{"title":"run – Julienne","text":"module procedure run impure elemental module function run(self) result(test_result) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t )","tags":"","loc":"proc/run~2.html"},{"title":"julienne_test_result_m – Julienne","text":"Define an abstraction for describing test intentions and results Uses julienne_string_m module~~julienne_test_result_m~~UsesGraph module~julienne_test_result_m julienne_test_result_m module~julienne_string_m julienne_string_m module~julienne_test_result_m->module~julienne_string_m assert_m assert_m module~julienne_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_result_s module~~julienne_test_result_m~~UsedByGraph module~julienne_test_result_m julienne_test_result_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_result_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_s->module~julienne_test_result_m module~julienne_vector_test_description_m->module~julienne_test_result_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_test_description_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m module~julienne_vector_test_description_s julienne_vector_test_description_s module~julienne_vector_test_description_s->module~julienne_vector_test_description_m program~check_command_line_argument check_command_line_argument program~check_command_line_argument->module~julienne_m program~get_flag_value get_flag_value program~get_flag_value->module~julienne_m program~handle_missing_flag handle_missing_flag program~handle_missing_flag->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface test_result_t private elemental module function construct_from_character(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) private elemental module function construct_from_string(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) interface private pure module function characterize(self) result(characterization) Implementation → The result is a character description of the test and its outcome Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable interface private elemental module function description_contains(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical interface private impure elemental module function passed(self) result(test_passed) Implementation → The result is true if and only if the test passed on all images Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Derived Types type, public :: test_result_t Encapsulate test descriptions and outcomes Components Type Visibility Attributes Name Initial type( string_t ), public :: description_ logical, public :: passed_ Constructor private\n\n                    elemental, module\n                    function construct_from_character (description, passed) The result is a test_result_t object with the components defined by the dummy arguments private\n\n                    elemental, module\n                    function construct_from_string (description, passed) The result is a test_result_t object with the components defined by the dummy arguments Type-Bound Procedures procedure, public :: characterize procedure, public :: description_contains procedure, public :: passed","tags":"","loc":"module/julienne_test_result_m.html"},{"title":"julienne_m – Julienne","text":"Uses julienne_command_line_m julienne_vector_test_description_m julienne_test_m julienne_file_m julienne_formats_m julienne_test_result_m julienne_string_m julienne_test_description_m julienne_bin_m module~~julienne_m~~UsesGraph module~julienne_m julienne_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_file_m->module~julienne_string_m assert_m assert_m module~julienne_string_m->assert_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_result_m->module~julienne_string_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_vector_test_description_m->module~julienne_test_result_m module~julienne_vector_test_description_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~julienne_m~~UsedByGraph module~julienne_m julienne_m program~check_command_line_argument check_command_line_argument program~check_command_line_argument->module~julienne_m program~get_flag_value get_flag_value program~get_flag_value->module~julienne_m program~handle_missing_flag handle_missing_flag program~handle_missing_flag->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"module/julienne_m.html"},{"title":"julienne_test_m – Julienne","text":"Define an abstract test_t type with deferred bindings (\"subject\" and \"results\")\nused by a type-bound procedure (\"report\") for reporting test results.  The \"report\"\nprocedure thus represents an implementation of the Template Method pattern. Uses julienne_test_result_m module~~julienne_test_m~~UsesGraph module~julienne_test_m julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_string_m julienne_string_m module~julienne_test_result_m->module~julienne_string_m assert_m assert_m module~julienne_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_s module~~julienne_test_m~~UsedByGraph module~julienne_test_m julienne_test_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m program~check_command_line_argument check_command_line_argument program~check_command_line_argument->module~julienne_m program~get_flag_value get_flag_value program~get_flag_value->module~julienne_m program~handle_missing_flag handle_missing_flag program~handle_missing_flag->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=:), public, allocatable :: test_description_substring Interfaces interface private module subroutine report(test, passes, tests) Implementation → Print the test results and increment the tallies of passing tests and total tests Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests Abstract Interfaces abstract interface private  function results_interface() result(test_results) The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure Arguments None Return Value type( test_result_t ), allocatable, (:) abstract interface private pure function subject_interface() result(specimen) The result is the name of the test specimen (the subject of testing) Arguments None Return Value character(len=:), allocatable Derived Types type, public, abstract :: test_t Facilitate testing and test reporting Type-Bound Procedures procedure, public :: report procedure( results_interface ), public, deferred, nopass :: results procedure( subject_interface ), public, deferred, nopass :: subject","tags":"","loc":"module/julienne_test_m.html"},{"title":"julienne_command_line_m – Julienne","text":"return command line argument information Used by Descendants: julienne_command_line_s module~~julienne_command_line_m~~UsedByGraph module~julienne_command_line_m julienne_command_line_m module~julienne_command_line_s julienne_command_line_s module~julienne_command_line_s->module~julienne_command_line_m module~julienne_m julienne_m module~julienne_m->module~julienne_command_line_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_command_line_m program~check_command_line_argument check_command_line_argument program~check_command_line_argument->module~julienne_m program~get_flag_value get_flag_value program~get_flag_value->module~julienne_m program~handle_missing_flag handle_missing_flag program~handle_missing_flag->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface private module function argument_present(acceptable_argument) result(found) Implementation → result is .true. only if a command-line argument matches an element of this function's argument Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical interface private module function flag_value(flag) Implementation → result is the value passed adjacent to a command-line flag Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable Derived Types type, public :: command_line_t Type-Bound Procedures procedure, public, nopass :: argument_present procedure, public, nopass :: flag_value","tags":"","loc":"module/julienne_command_line_m.html"},{"title":"julienne_test_description_m – Julienne","text":"Define an abstraction for describing test intentions and test functions Uses julienne_test_result_m julienne_string_m module~~julienne_test_description_m~~UsesGraph module~julienne_test_description_m julienne_test_description_m module~julienne_string_m julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_description_m->module~julienne_test_result_m assert_m assert_m module~julienne_string_m->assert_m module~julienne_test_result_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_description_s module~~julienne_test_description_m~~UsedByGraph module~julienne_test_description_m julienne_test_description_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_description_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_test_description_m program~check_command_line_argument check_command_line_argument program~check_command_line_argument->module~julienne_m program~get_flag_value get_flag_value program~get_flag_value->module~julienne_m program~handle_missing_flag handle_missing_flag program~handle_missing_flag->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface test_description_t private module function construct_from_character(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) private module function construct_from_string_t(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) interface private impure elemental module function contains_text(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → The result is .true. if the components of the lhs & rhs are equal Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical interface private impure elemental module function run(self) result(test_result) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) Abstract Interfaces abstract interface public  function test_function_i() result(passes) Arguments None Return Value logical Derived Types type, public :: test_description_t Encapsulate test descriptions and test-functions Components Type Visibility Attributes Name Initial type( string_t ), private :: description_ procedure( test_function_i ), private, pointer, nopass :: test_function_ => null() Constructor private\n\n                    module\n                    function construct_from_character (description, test_function) The result is a test_description_t object with the components defined by the dummy arguments private\n\n                    module\n                    function construct_from_string_t (description, test_function) The result is a test_description_t object with the components defined by the dummy arguments Type-Bound Procedures procedure, public :: contains_text generic, public :: operator(==) => equals procedure, public :: run procedure, private :: equals","tags":"","loc":"module/julienne_test_description_m.html"},{"title":"julienne_file_m – Julienne","text":"A representation of a file as an object Uses julienne_string_m module~~julienne_file_m~~UsesGraph module~julienne_file_m julienne_file_m module~julienne_string_m julienne_string_m module~julienne_file_m->module~julienne_string_m assert_m assert_m module~julienne_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_file_s module~~julienne_file_m~~UsedByGraph module~julienne_file_m julienne_file_m module~julienne_file_s julienne_file_s module~julienne_file_s->module~julienne_file_m module~julienne_m julienne_m module~julienne_m->module~julienne_file_m program~check_command_line_argument check_command_line_argument program~check_command_line_argument->module~julienne_m program~get_flag_value get_flag_value program~get_flag_value->module~julienne_m program~handle_missing_flag handle_missing_flag program~handle_missing_flag->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface file_t private pure module function construct(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) private module function read_lines(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) interface private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) interface private impure elemental module subroutine write_lines(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in), optional :: file_name Derived Types type, public :: file_t Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: lines_ (:) Constructor private\n\n                    pure, module\n                    function construct (lines) private\n\n                    module\n                    function read_lines (file_name) Type-Bound Procedures procedure, public :: lines procedure, public :: write_lines","tags":"","loc":"module/julienne_file_m.html"},{"title":"julienne_formats_m – Julienne","text":"Useful strings for formatting print and write statements Used by Descendants: julienne_formats_s module~~julienne_formats_m~~UsedByGraph module~julienne_formats_m julienne_formats_m module~julienne_formats_s julienne_formats_s module~julienne_formats_s->module~julienne_formats_m module~julienne_m julienne_m module~julienne_m->module~julienne_formats_m program~check_command_line_argument check_command_line_argument program~check_command_line_argument->module~julienne_m program~get_flag_value get_flag_value program~get_flag_value->module~julienne_m program~handle_missing_flag handle_missing_flag program~handle_missing_flag->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: cscv = \"(*('(',G0,',',G0,')',:,',')))\" comma-separated complex values character(len=*), public, parameter :: csv = \"(*(G0,:,','))\" comma-separated values Interfaces interface public pure module function separated_values(separator, mold) result(format_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","loc":"module/julienne_formats_m.html"},{"title":"julienne_string_m – Julienne","text":"Uses assert_m module~~julienne_string_m~~UsesGraph module~julienne_string_m julienne_string_m assert_m assert_m module~julienne_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_string_s module~~julienne_string_m~~UsedByGraph module~julienne_string_m julienne_string_m module~julienne_file_m julienne_file_m module~julienne_file_m->module~julienne_string_m module~julienne_m julienne_m module~julienne_m->module~julienne_string_m module~julienne_m->module~julienne_file_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_string_s julienne_string_s module~julienne_string_s->module~julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_result_m->module~julienne_string_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_vector_test_description_m->module~julienne_test_result_m module~julienne_file_s julienne_file_s module~julienne_file_s->module~julienne_file_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_s->module~julienne_test_result_m module~julienne_vector_test_description_s julienne_vector_test_description_s module~julienne_vector_test_description_s->module~julienne_vector_test_description_m program~check_command_line_argument check_command_line_argument program~check_command_line_argument->module~julienne_m program~get_flag_value get_flag_value program~get_flag_value->module~julienne_m program~handle_missing_flag handle_missing_flag program~handle_missing_flag->module~julienne_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:) public        interface operator(.cat.) private pure module function concatenate_elements(strings) result(concatenated_strings) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) public        interface string_t private elemental module function construct(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) interface private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable interface private pure module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs interface private pure module function base_name(self) result(base) Implementation → result contains all characters in file_name before the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function file_extension(self) result(extension) Implementation → result contains all characters in file_name after the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private pure module function get_json_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer interface private pure module function get_json_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) interface private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private elemental module function get_json_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical interface private pure module function get_json_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real interface private pure module function get_json_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) interface private elemental module function get_json_string(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical interface private pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) interface private pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Derived Types type, public, extends(characterizable_t) :: string_t Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: string_ Constructor private\n\n                    elemental, module\n                    function construct (string) private\n\n                    elemental, module\n                    function from_default_integer (i) private\n\n                    elemental, module\n                    function from_real (x) Type-Bound Procedures procedure, public :: as_character generic, public :: assignment(= ) => assign_string_t_to_character , assign_character_to_string_t procedure, public :: base_name procedure, public :: file_extension procedure, public :: get_json_key generic, public :: get_json_value => get_json_integer_array , get_json_logical , get_json_integer , get_json_string , get_json_real , get_json_real_array procedure, public :: is_allocated generic, public :: operator(//) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t generic, public :: operator(/=) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t generic, public :: operator(==) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t generic, public :: string => as_character procedure, private :: assign_character_to_string_t procedure, private, pass(rhs) :: assign_string_t_to_character procedure, private, pass(rhs) :: character_cat_string_t procedure, private, pass(rhs) :: character_eq_string_t procedure, private, pass(rhs) :: character_ne_string_t procedure, private :: get_json_integer procedure, private :: get_json_integer_array procedure, private :: get_json_logical procedure, private :: get_json_real procedure, private :: get_json_real_array procedure, private :: get_json_string procedure, private :: string_t_cat_character procedure, private :: string_t_cat_string_t procedure, private :: string_t_eq_character procedure, private :: string_t_eq_string_t procedure, private :: string_t_ne_character procedure, private :: string_t_ne_string_t","tags":"","loc":"module/julienne_string_m.html"},{"title":"julienne_vector_test_description_m – Julienne","text":"Define an abstraction for describing test intentions and array-valued test functions Uses assert_m julienne_test_result_m julienne_string_m module~~julienne_vector_test_description_m~~UsesGraph module~julienne_vector_test_description_m julienne_vector_test_description_m assert_m assert_m module~julienne_vector_test_description_m->assert_m module~julienne_string_m julienne_string_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_test_result_m julienne_test_result_m module~julienne_vector_test_description_m->module~julienne_test_result_m module~julienne_string_m->assert_m module~julienne_test_result_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_vector_test_description_s module~~julienne_vector_test_description_m~~UsedByGraph module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m julienne_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_vector_test_description_s julienne_vector_test_description_s module~julienne_vector_test_description_s->module~julienne_vector_test_description_m program~check_command_line_argument check_command_line_argument program~check_command_line_argument->module~julienne_m program~get_flag_value get_flag_value program~get_flag_value->module~julienne_m program~handle_missing_flag handle_missing_flag program~handle_missing_flag->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface vector_test_description_t private module function construct(description_vector, vector_function_strategy) result(vector_test_description) Implementation → The result is a vector_test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description_vector (:) class( vector_function_strategy_t ), intent(in) :: vector_function_strategy Return Value type( vector_test_description_t ) interface private module function contains_text(self, substring) result(match_vector) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) interface private impure module function run(self) result(test_results) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:) Abstract Interfaces abstract interface private  function vector_function_i() result(passes) Arguments None Return Value logical, allocatable, (:) Derived Types type, public, abstract :: vector_function_strategy_t Type-Bound Procedures procedure( vector_function_i ), public, deferred, nopass :: vector_function type, public :: vector_test_description_t Encapsulate test descriptions and vector-valued test functions Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: description_vector_ (:) class( vector_function_strategy_t ), private, allocatable :: vector_function_strategy_ Constructor private\n\n                    module\n                    function construct (description_vector, vector_function_strategy) The result is a vector_test_description_t object with the components defined by the dummy arguments Type-Bound Procedures procedure, public :: contains_text procedure, public :: run","tags":"","loc":"module/julienne_vector_test_description_m.html"},{"title":"julienne_bin_m – Julienne","text":"distribute item numbers across bins such that the number of items differs by at most 1 between any two bins Used by Descendants: julienne_bin_s module~~julienne_bin_m~~UsedByGraph module~julienne_bin_m julienne_bin_m module~julienne_bin_s julienne_bin_s module~julienne_bin_s->module~julienne_bin_m module~julienne_m julienne_m module~julienne_m->module~julienne_bin_m program~check_command_line_argument check_command_line_argument program~check_command_line_argument->module~julienne_m program~get_flag_value get_flag_value program~get_flag_value->module~julienne_m program~handle_missing_flag handle_missing_flag program~handle_missing_flag->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface bin_t private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) interface private elemental module function first(self) result(first_item_number) Implementation → the result is the first item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer interface private elemental module function last(self) result(last_item_number) Implementation → the result is the last item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Derived Types type, public :: bin_t encapsulate a range of item numbers associated with a bin Components Type Visibility Attributes Name Initial integer, private :: first_ integer, private :: last_ Constructor private\n\n                    elemental, module\n                    function construct (num_items, num_bins, bin_number) the result is a bin associated with a range of item numbers Type-Bound Procedures procedure, public :: first procedure, public :: last","tags":"","loc":"module/julienne_bin_m.html"},{"title":"julienne_user_defined_collectives_m – Julienne","text":"User-defined collective subroutines. Used by Descendants: julienne_user_defined_collectives_s module~~julienne_user_defined_collectives_m~~UsedByGraph module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_s->module~julienne_user_defined_collectives_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_user_defined_collectives_m module~julienne_user_defined_collectives_s julienne_user_defined_collectives_s module~julienne_user_defined_collectives_s->module~julienne_user_defined_collectives_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public impure elemental module subroutine co_all(boolean) Implementation → If any image in a team calls this subroutine, then every image in the \nthe same team must call this subroutine.  This subroutine sets the\n\"boolean\" argument .true. if it is true in all participating images\nupon entry and .false. otherwise. Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","loc":"module/julienne_user_defined_collectives_m.html"},{"title":"julienne_vector_test_description_s – Julienne","text":"Uses Ancestors: julienne_vector_test_description_m module~~julienne_vector_test_description_s~~UsesGraph module~julienne_vector_test_description_s julienne_vector_test_description_s module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_vector_test_description_s->module~julienne_vector_test_description_m assert_m assert_m module~julienne_vector_test_description_m->assert_m module~julienne_string_m julienne_string_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_test_result_m julienne_test_result_m module~julienne_vector_test_description_m->module~julienne_test_result_m module~julienne_string_m->assert_m module~julienne_test_result_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_vector_test_description_s.html construct module function construct(description_vector, vector_function_strategy) result(vector_test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description_vector (:) class( vector_function_strategy_t ), intent(in) :: vector_function_strategy Return Value type( vector_test_description_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_vector_test_description_s.html contains_text module function contains_text(self, substring) result(match_vector) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_vector_test_description_s.html run impure module function run(self) result(test_results) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:)","tags":"","loc":"module/julienne_vector_test_description_s.html"},{"title":"julienne_file_s – Julienne","text":"Uses iso_fortran_env assert_m Ancestors: julienne_file_m module~~julienne_file_s~~UsesGraph module~julienne_file_s julienne_file_s assert_m assert_m module~julienne_file_s->assert_m iso_fortran_env iso_fortran_env module~julienne_file_s->iso_fortran_env module~julienne_file_m julienne_file_m module~julienne_file_s->module~julienne_file_m module~julienne_string_m julienne_string_m module~julienne_file_m->module~julienne_string_m module~julienne_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html construct pure module function construct(lines) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html lines pure module function lines(self) result(my_lines) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html read_lines module function read_lines(file_name) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html write_lines impure elemental module subroutine write_lines(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in), optional :: file_name","tags":"","loc":"module/julienne_file_s.html"},{"title":"julienne_bin_s – Julienne","text":"Uses assert_m Ancestors: julienne_bin_m module~~julienne_bin_s~~UsesGraph module~julienne_bin_s julienne_bin_s assert_m assert_m module~julienne_bin_s->assert_m module~julienne_bin_m julienne_bin_m module~julienne_bin_s->module~julienne_bin_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_bin_s.html construct elemental module function construct(num_items, num_bins, bin_number) result(bin) Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_bin_s.html first elemental module function first(self) result(first_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_bin_s.html last elemental module function last(self) result(last_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","loc":"module/julienne_bin_s.html"},{"title":"julienne_formats_s – Julienne","text":"Construct separated-value formats Uses Ancestors: julienne_formats_m module~~julienne_formats_s~~UsesGraph module~julienne_formats_s julienne_formats_s module~julienne_formats_m julienne_formats_m module~julienne_formats_s->module~julienne_formats_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_formats_s.html separated_values pure module function separated_values(separator, mold) result(format_string) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","loc":"module/julienne_formats_s.html"},{"title":"julienne_string_s – Julienne","text":"Uses assert_m Ancestors: julienne_string_m module~~julienne_string_s~~UsesGraph module~julienne_string_s julienne_string_s assert_m assert_m module~julienne_string_s->assert_m module~julienne_string_m julienne_string_m module~julienne_string_s->module~julienne_string_m module~julienne_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html array_of_strings pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html as_character pure module function as_character(self) result(raw_string) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html assign_character_to_string_t pure module subroutine assign_character_to_string_t(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html assign_string_t_to_character pure module subroutine assign_string_t_to_character(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html base_name pure module function base_name(self) result(base) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html character_cat_string_t pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html character_eq_string_t elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html character_ne_string_t elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html concatenate_elements pure module function concatenate_elements(strings) result(concatenated_strings) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html construct elemental module function construct(string) result(new_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html file_extension elemental module function file_extension(self) result(extension) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_default_integer elemental module function from_default_integer(i) result(string) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_real elemental module function from_real(x) result(string) Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_json_integer pure module function get_json_integer(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_json_integer_array pure module function get_json_integer_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_json_key elemental module function get_json_key(self) result(unquoted_key) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_json_logical elemental module function get_json_logical(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_json_real pure module function get_json_real(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_json_real_array pure module function get_json_real_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_json_string elemental module function get_json_string(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html is_allocated elemental module function is_allocated(self) result(string_allocated) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_cat_character pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_cat_string_t pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_eq_character elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_eq_string_t elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_ne_character elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_ne_string_t elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"module/julienne_string_s.html"},{"title":"julienne_test_result_s – Julienne","text":"Uses julienne_user_defined_collectives_m Ancestors: julienne_test_result_m module~~julienne_test_result_s~~UsesGraph module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_m julienne_test_result_m module~julienne_test_result_s->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_result_s->module~julienne_user_defined_collectives_m module~julienne_string_m julienne_string_m module~julienne_test_result_m->module~julienne_string_m assert_m assert_m module~julienne_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html characterize pure module function characterize(self) result(characterization) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html construct_from_character elemental module function construct_from_character(description, passed) result(test_result) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html construct_from_string elemental module function construct_from_string(description, passed) result(test_result) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html description_contains elemental module function description_contains(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html passed impure elemental module function passed(self) result(test_passed) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical","tags":"","loc":"module/julienne_test_result_s.html"},{"title":"julienne_test_s – Julienne","text":"Uses julienne_command_line_m julienne_user_defined_collectives_m Ancestors: julienne_test_m module~~julienne_test_s~~UsesGraph module~julienne_test_s julienne_test_s module~julienne_command_line_m julienne_command_line_m module~julienne_test_s->module~julienne_command_line_m module~julienne_test_m julienne_test_m module~julienne_test_s->module~julienne_test_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_s->module~julienne_user_defined_collectives_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_string_m julienne_string_m module~julienne_test_result_m->module~julienne_string_m assert_m assert_m module~julienne_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_s.html report module subroutine report(test, passes, tests) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests","tags":"","loc":"module/julienne_test_s.html"},{"title":"julienne_command_line_s – Julienne","text":"Uses Ancestors: julienne_command_line_m module~~julienne_command_line_s~~UsesGraph module~julienne_command_line_s julienne_command_line_s module~julienne_command_line_m julienne_command_line_m module~julienne_command_line_s->module~julienne_command_line_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_command_line_s.html argument_present module function argument_present(acceptable_argument) result(found) Interface → list of acceptable arguments\nsample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS and slashes support Windows Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_command_line_s.html flag_value module function flag_value(flag) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","loc":"module/julienne_command_line_s.html"},{"title":"julienne_user_defined_collectives_s – Julienne","text":"Uses Ancestors: julienne_user_defined_collectives_m module~~julienne_user_defined_collectives_s~~UsesGraph module~julienne_user_defined_collectives_s julienne_user_defined_collectives_s module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_user_defined_collectives_s->module~julienne_user_defined_collectives_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_user_defined_collectives_s.html co_all impure elemental module subroutine co_all(boolean) Interface → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","loc":"module/julienne_user_defined_collectives_s.html"},{"title":"julienne_test_description_s – Julienne","text":"Uses Ancestors: julienne_test_description_m module~~julienne_test_description_s~~UsesGraph module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_m julienne_test_description_m module~julienne_test_description_s->module~julienne_test_description_m module~julienne_string_m julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_description_m->module~julienne_test_result_m assert_m assert_m module~julienne_string_m->assert_m module~julienne_test_result_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html construct_from_character module function construct_from_character(description, test_function) result(test_description) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html construct_from_string_t module function construct_from_string_t(description, test_function) result(test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html contains_text impure elemental module function contains_text(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html equals elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html run impure elemental module function run(self) result(test_result) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t )","tags":"","loc":"module/julienne_test_description_s.html"},{"title":"handle_missing_flag – Julienne","text":"Uses assert_m julienne_m program~~handle_missing_flag~~UsesGraph program~handle_missing_flag handle_missing_flag assert_m assert_m program~handle_missing_flag->assert_m module~julienne_m julienne_m program~handle_missing_flag->module~julienne_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_file_m->module~julienne_string_m module~julienne_string_m->assert_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_result_m->module~julienne_string_m module~julienne_vector_test_description_m->assert_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_vector_test_description_m->module~julienne_test_result_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. This program serves the dual purposes of Showing an example of a command-line with an expected flag missing an Supporting the test suite check that the returned value has zero length. Running this program as follows with the command fpm run --example handle-missing-flag -- --empty-flag should result in normal termination. Calls program~~handle_missing_flag~~CallsGraph program~handle_missing_flag handle_missing_flag assert assert program~handle_missing_flag->assert interface~flag_value command_line_t%flag_value program~handle_missing_flag->interface~flag_value Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( command_line_t ) :: command_line character(len=*), parameter :: expected_name = \"\" character(len=:), allocatable :: flag_value","tags":"","loc":"program/handle_missing_flag.html"},{"title":"check_command_line_argument – Julienne","text":"Uses assert_m julienne_m program~~check_command_line_argument~~UsesGraph program~check_command_line_argument check_command_line_argument assert_m assert_m program~check_command_line_argument->assert_m module~julienne_m julienne_m program~check_command_line_argument->module~julienne_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_file_m->module~julienne_string_m module~julienne_string_m->assert_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_result_m->module~julienne_string_m module~julienne_vector_test_description_m->assert_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_vector_test_description_m->module~julienne_test_result_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. This program serves the dual purposes of \n1. Showing how to use the command_line_t derived type to check whether a\n   command-line argument is present and\n2. Supporting the test suite verification of this same behavior. Running this program as follows with the command fpm run --example check-command-line-argument -- --some-argument should result in normal termination. Calls program~~check_command_line_argument~~CallsGraph program~check_command_line_argument check_command_line_argument assert assert program~check_command_line_argument->assert interface~argument_present command_line_t%argument_present program~check_command_line_argument->interface~argument_present Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial logical :: argument_passed type( command_line_t ) :: command_line","tags":"","loc":"program/check_command_line_argument.html"},{"title":"get_flag_value – Julienne","text":"Uses assert_m julienne_m program~~get_flag_value~~UsesGraph program~get_flag_value get_flag_value assert_m assert_m program~get_flag_value->assert_m module~julienne_m julienne_m program~get_flag_value->module~julienne_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_file_m->module~julienne_string_m module~julienne_string_m->assert_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_result_m->module~julienne_string_m module~julienne_vector_test_description_m->assert_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_vector_test_description_m->module~julienne_test_result_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Demonstrate how to find the value of a command-line flag \nRunning this program as follows with the command fpm run --example get-flag-value -- --input-file foo result in normal termination. Calls program~~get_flag_value~~CallsGraph program~get_flag_value get_flag_value assert assert program~get_flag_value->assert interface~flag_value command_line_t%flag_value program~get_flag_value->interface~flag_value Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( command_line_t ) :: command_line character(len=*), parameter :: expected_name = \"some_file_name\" character(len=:), allocatable :: input_file_name","tags":"","loc":"program/get_flag_value.html"},{"title":"julienne_test_result_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_result_m.f90~~EfferentGraph sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_result_m.f90~~AfferentGraph sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_s.f90 julienne_test_result_s.F90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~check-command-line-argument.f90 check-command-line-argument.f90 sourcefile~check-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-flag-value.f90 get-flag-value.f90 sourcefile~get-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~handle-missing-flag.f90 handle-missing-flag.f90 sourcefile~handle-missing-flag.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.f90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_vector_test_description_s.f90 julienne_vector_test_description_s.f90 sourcefile~julienne_vector_test_description_s.f90->sourcefile~julienne_vector_test_description_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_test_result_m !! Define an abstraction for describing test intentions and results use julienne_string_m , only : string_t implicit none private public :: test_result_t type test_result_t !! Encapsulate test descriptions and outcomes !private type ( string_t ) description_ logical passed_ contains procedure :: characterize procedure :: passed procedure :: description_contains end type interface test_result_t elemental module function construct_from_character ( description , passed ) result ( test_result ) !! The result is a test_result_t object with the components defined by the dummy arguments implicit none character ( len =* ), intent ( in ) :: description logical , intent ( in ) :: passed type ( test_result_t ) test_result end function elemental module function construct_from_string ( description , passed ) result ( test_result ) !! The result is a test_result_t object with the components defined by the dummy arguments implicit none type ( string_t ), intent ( in ) :: description logical , intent ( in ) :: passed type ( test_result_t ) test_result end function end interface interface pure module function characterize ( self ) result ( characterization ) !! The result is a character description of the test and its outcome implicit none class ( test_result_t ), intent ( in ) :: self character ( len = :), allocatable :: characterization end function impure elemental module function passed ( self ) result ( test_passed ) !! The result is true if and only if the test passed on all images implicit none class ( test_result_t ), intent ( in ) :: self logical test_passed end function elemental module function description_contains ( self , substring ) result ( substring_found ) !! The result is true if and only if the test description contains the substring implicit none class ( test_result_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: substring logical substring_found end function end interface end module julienne_test_result_m","tags":"","loc":"sourcefile/julienne_test_result_m.f90.html"},{"title":"julienne_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_m.f90~~EfferentGraph sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_m.f90~~AfferentGraph sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~check-command-line-argument.f90 check-command-line-argument.f90 sourcefile~check-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-flag-value.f90 get-flag-value.f90 sourcefile~get-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~handle-missing-flag.f90 handle-missing-flag.f90 sourcefile~handle-missing-flag.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_m use julienne_bin_m , only : bin_t use julienne_command_line_m , only : command_line_t use julienne_file_m , only : file_t use julienne_formats_m , only : separated_values , csv use julienne_string_m , only : string_t , operator (. cat .) use julienne_test_m , only : test_t , test_description_substring use julienne_test_description_m , only : test_description_t , test_function_i use julienne_test_result_m , only : test_result_t use julienne_vector_test_description_m , only : vector_test_description_t , vector_function_strategy_t implicit none private public :: bin_t public :: csv public :: command_line_t public :: operator (. cat .) public :: file_t public :: separated_values public :: string_t public :: test_t public :: test_description_t public :: test_description_substring public :: test_function_i public :: test_result_t public :: vector_function_strategy_t public :: vector_test_description_t end module julienne_m","tags":"","loc":"sourcefile/julienne_m.f90.html"},{"title":"handle-missing-flag.f90 – Julienne","text":"This file depends on sourcefile~~handle-missing-flag.f90~~EfferentGraph sourcefile~handle-missing-flag.f90 handle-missing-flag.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~handle-missing-flag.f90->sourcefile~julienne_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program handle_missing_flag !! This program serves the dual purposes of !! !! 1. Showing an example of a command-line with an expected flag missing an !! 2. Supporting the test suite check that the returned value has zero length. !! !! Running this program as follows with the command !! !! fpm run --example handle-missing-flag -- --empty-flag !! !! should result in normal termination. use assert_m , only : assert use julienne_m , only : command_line_t implicit none type ( command_line_t ) command_line character ( len = :), allocatable :: flag_value character ( len =* ), parameter :: expected_name = \"\" flag_value = command_line % flag_value ( \"--empty-flag\" ) call assert ( flag_value == expected_name , \"handle_missing_flag: expected empty flag value\" , flag_value ) end program","tags":"","loc":"sourcefile/handle-missing-flag.f90.html"},{"title":"julienne_vector_test_description_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_vector_test_description_s.f90~~EfferentGraph sourcefile~julienne_vector_test_description_s.f90 julienne_vector_test_description_s.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.f90 sourcefile~julienne_vector_test_description_s.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( julienne_vector_test_description_m ) julienne_vector_test_description_s implicit none contains module procedure contains_text integer i associate ( num_descriptions => size ( self % description_vector_ )) allocate ( match_vector ( num_descriptions )) do i = 1 , num_descriptions match_vector ( i ) = index ( self % description_vector_ ( i )% string (), substring ) /= 0 end do end associate end procedure module procedure construct vector_test_description % description_vector_ = description_vector vector_test_description % vector_function_strategy_ = vector_function_strategy end procedure module procedure run associate ( vector_result => self % vector_function_strategy_ % vector_function ()) call assert ( size ( self % description_vector_ ) == size ( vector_result ), \"julienne_vector_test_description_s: size match\" ) test_results = test_result_t ( self % description_vector_ , vector_result ) end associate end procedure end submodule julienne_vector_test_description_s","tags":"","loc":"sourcefile/julienne_vector_test_description_s.f90.html"},{"title":"julienne_file_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_file_s.f90~~EfferentGraph sourcefile~julienne_file_s.f90 julienne_file_s.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_file_s.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( julienne_file_m ) julienne_file_s use iso_fortran_env , only : iostat_end , iostat_eor , output_unit use assert_m , only : assert implicit none contains module procedure construct file_object % lines_ = lines end procedure module procedure write_lines integer file_unit , io_status , l call assert ( allocated ( self % lines_ ), \"file_t%write_lines: allocated(self%lines_)\" ) if ( present ( file_name )) then open ( newunit = file_unit , file = file_name % string (), form = 'formatted' , status = 'unknown' , iostat = io_status , action = 'write' ) call assert ( io_status == 0 , \"write_lines: io_status==0 after 'open' statement\" , file_name % string ()) else file_unit = output_unit end if do l = 1 , size ( self % lines_ ) write ( file_unit , * ) self % lines_ ( l )% string () end do if ( present ( file_name )) close ( file_unit ) end procedure module procedure read_lines integer io_status , file_unit , line_num character ( len = :), allocatable :: line integer , parameter :: max_message_length = 128 character ( len = max_message_length ) error_message integer , allocatable :: lengths (:) open ( newunit = file_unit , file = file_name % string (), form = 'formatted' , status = 'old' , iostat = io_status , action = 'read' ) call assert ( io_status == 0 , \"read_lines: io_status==0 after 'open' statement\" , file_name % string ()) lengths = line_lengths ( file_unit ) associate ( num_lines => size ( lengths )) allocate ( file_object % lines_ ( num_lines )) do line_num = 1 , num_lines allocate ( character ( len = lengths ( line_num )) :: line ) read ( file_unit , '(a)' , iostat = io_status , iomsg = error_message ) line call assert ( io_status == 0 , \"read_lines: io_status==0 after line read\" , error_message ) file_object % lines_ ( line_num ) = string_t ( line ) deallocate ( line ) end do end associate close ( file_unit ) contains function line_count ( file_unit ) result ( num_lines ) integer , intent ( in ) :: file_unit integer num_lines rewind ( file_unit ) num_lines = 0 do read ( file_unit , * , iostat = io_status ) if ( io_status == iostat_end ) exit num_lines = num_lines + 1 end do rewind ( file_unit ) end function function line_lengths ( file_unit ) result ( lengths ) integer , intent ( in ) :: file_unit integer , allocatable :: lengths (:) integer io_status character ( len = 1 ) c associate ( num_lines => line_count ( file_unit )) allocate ( lengths ( num_lines ), source = 0 ) rewind ( file_unit ) do line_num = 1 , num_lines do read ( file_unit , '(a)' , advance = 'no' , iostat = io_status , iomsg = error_message ) c if ( io_status == iostat_eor . or . io_status == iostat_end ) exit lengths ( line_num ) = lengths ( line_num ) + 1 end do end do rewind ( file_unit ) end associate end function end procedure module procedure lines my_lines = self % lines_ end procedure end submodule julienne_file_s","tags":"","loc":"sourcefile/julienne_file_s.f90.html"},{"title":"julienne_bin_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_bin_s.f90~~EfferentGraph sourcefile~julienne_bin_s.f90 julienne_bin_s.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_bin_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( julienne_bin_m ) julienne_bin_s use assert_m , only : assert , intrinsic_array_t implicit none contains module procedure construct call assert ( num_items >= num_bins , \"bin_s(construct): num_items>=num_bins\" , intrinsic_array_t ([ num_items , num_bins ])) associate ( remainder => mod ( num_items , num_bins ), items_per_bin => num_items / num_bins ) if ( bin_number <= remainder ) then bin % first_ = 1 + ( bin_number - 1 ) * ( items_per_bin + 1 ) bin % last_ = bin_number * ( items_per_bin + 1 ) else bin % first_ = 1 + ( remainder - 1 ) * ( items_per_bin + 1 ) + 1 + ( bin_number - remainder ) * items_per_bin bin % last_ = remainder * ( items_per_bin + 1 ) + ( bin_number - remainder ) * items_per_bin end if end associate end procedure module procedure first first_item_number = self % first_ end procedure module procedure last last_item_number = self % last_ end procedure end submodule julienne_bin_s","tags":"","loc":"sourcefile/julienne_bin_s.f90.html"},{"title":"julienne_test_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_m.f90~~EfferentGraph sourcefile~julienne_test_m.f90 julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_m.f90~~AfferentGraph sourcefile~julienne_test_m.f90 julienne_test_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~check-command-line-argument.f90 check-command-line-argument.f90 sourcefile~check-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-flag-value.f90 get-flag-value.f90 sourcefile~get-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~handle-missing-flag.f90 handle-missing-flag.f90 sourcefile~handle-missing-flag.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_test_m !! Define an abstract test_t type with deferred bindings (\"subject\" and \"results\") !! used by a type-bound procedure (\"report\") for reporting test results.  The \"report\" !! procedure thus represents an implementation of the Template Method pattern. use julienne_test_result_m , only : test_result_t implicit none private public :: test_t , test_description_substring character ( len = :), allocatable , protected :: test_description_substring type , abstract :: test_t !! Facilitate testing and test reporting contains procedure ( subject_interface ), nopass , deferred :: subject procedure ( results_interface ), nopass , deferred :: results procedure :: report end type abstract interface pure function subject_interface () result ( specimen ) !! The result is the name of the test specimen (the subject of testing) character ( len = :), allocatable :: specimen end function function results_interface () result ( test_results ) !! The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure import test_result_t type ( test_result_t ), allocatable :: test_results (:) end function end interface interface module subroutine report ( test , passes , tests ) !! Print the test results and increment the tallies of passing tests and total tests implicit none class ( test_t ), intent ( in ) :: test integer , intent ( inout ) :: passes , tests end subroutine end interface end module julienne_test_m","tags":"","loc":"sourcefile/julienne_test_m.f90.html"},{"title":"julienne_command_line_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_command_line_m.f90~~AfferentGraph sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_command_line_s.f90 julienne_command_line_s.f90 sourcefile~julienne_command_line_s.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_command_line_m.f90 sourcefile~check-command-line-argument.f90 check-command-line-argument.f90 sourcefile~check-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-flag-value.f90 get-flag-value.f90 sourcefile~get-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~handle-missing-flag.f90 handle-missing-flag.f90 sourcefile~handle-missing-flag.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_command_line_m !! return command line argument information implicit none private public :: command_line_t type command_line_t contains procedure , nopass :: argument_present procedure , nopass :: flag_value end type interface module function argument_present ( acceptable_argument ) result ( found ) implicit none !! result is .true. only if a command-line argument matches an element of this function's argument character ( len =* ), intent ( in ) :: acceptable_argument (:) !! sample list: [character(len=len(<longest_argument>)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"] !! where dashes support Linux/macOS, slashes support Windows, and <longest_argument> must be replaced !! by the longest list element (\"--benchmark\" above) logical found end function module function flag_value ( flag ) !! result is the value passed adjacent to a command-line flag implicit none character ( len =* ), intent ( in ) :: flag character ( len = :), allocatable :: flag_value end function end interface end module","tags":"","loc":"sourcefile/julienne_command_line_m.f90.html"},{"title":"julienne_formats_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_formats_s.f90~~EfferentGraph sourcefile~julienne_formats_s.f90 julienne_formats_s.F90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_formats_s.f90->sourcefile~julienne_formats_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_formats_m ) julienne_formats_s !! Construct separated-value formats implicit none contains #ifndef _CRAYFTN module procedure separated_values character ( len =* ), parameter :: prefix = \"(*(G0,:,'\" character ( len =* ), parameter :: suffix = \"'))\" character ( len =* ), parameter :: complex_prefix = \"(*('(',G0,',',G0,')',:,'\" select rank ( mold ) rank ( 1 ) select type ( mold ) type is ( complex ) format_string = complex_prefix // separator // suffix type is ( real ) format_string = prefix // separator // suffix type is ( integer ) format_string = prefix // separator // suffix type is ( character ( len =* )) format_string = prefix // separator // suffix class default error stop \"format_s separated_values: unsupported type\" end select rank default error stop \"formats_s separated_values: unsupported rank\" end select end procedure #else module procedure separated_values_1D character ( len =* ), parameter :: prefix = \"(*(G0,:,'\" character ( len =* ), parameter :: suffix = \"'))\" character ( len =* ), parameter :: complex_prefix = \"(*('(',G0,',',G0,')',:,'\" select type ( mold ) type is ( complex ) format_string = complex_prefix // separator // suffix type is ( real ) format_string = prefix // separator // suffix type is ( integer ) format_string = prefix // separator // suffix type is ( character ( len =* )) format_string = prefix // separator // suffix class default error stop \"format_s separated_values_1D: unsupported type\" end select end procedure #endif end submodule julienne_formats_s","tags":"","loc":"sourcefile/julienne_formats_s.f90.html"},{"title":"julienne_test_description_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_description_m.f90~~EfferentGraph sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_description_m.f90~~AfferentGraph sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.f90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~check-command-line-argument.f90 check-command-line-argument.f90 sourcefile~check-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-flag-value.f90 get-flag-value.f90 sourcefile~get-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~handle-missing-flag.f90 handle-missing-flag.f90 sourcefile~handle-missing-flag.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_test_description_m !! Define an abstraction for describing test intentions and test functions use julienne_string_m , only : string_t use julienne_test_result_m , only : test_result_t implicit none private public :: test_description_t public :: test_function_i abstract interface function test_function_i () result ( passes ) implicit none logical passes end function end interface type test_description_t !! Encapsulate test descriptions and test-functions private type ( string_t ) description_ procedure ( test_function_i ), pointer , nopass :: test_function_ => null () contains procedure run procedure contains_text generic :: operator ( == ) => equals procedure , private :: equals end type interface test_description_t module function construct_from_string_t ( description , test_function ) result ( test_description ) !! The result is a test_description_t object with the components defined by the dummy arguments implicit none type ( string_t ), intent ( in ) :: description procedure ( test_function_i ), intent ( in ), pointer :: test_function type ( test_description_t ) test_description end function module function construct_from_character ( description , test_function ) result ( test_description ) !! The result is a test_description_t object with the components defined by the dummy arguments implicit none character ( len =* ), intent ( in ) :: description procedure ( test_function_i ), intent ( in ), pointer :: test_function type ( test_description_t ) test_description end function end interface interface impure elemental module function run ( self ) result ( test_result ) !! The result encapsulates the test description and test outcome implicit none class ( test_description_t ), intent ( in ) :: self type ( test_result_t ) test_result end function impure elemental module function contains_text ( self , substring ) result ( match ) !! The result is .true. if the test description includes the value of substring implicit none class ( test_description_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: substring logical match end function elemental module function equals ( lhs , rhs ) result ( lhs_eq_rhs ) !! The result is .true. if the components of the lhs & rhs are equal implicit none class ( test_description_t ), intent ( in ) :: lhs , rhs logical lhs_eq_rhs end function end interface end module julienne_test_description_m","tags":"","loc":"sourcefile/julienne_test_description_m.f90.html"},{"title":"julienne_string_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_string_s.f90~~EfferentGraph sourcefile~julienne_string_s.f90 julienne_string_s.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_string_s.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_string_m ) julienne_string_s use assert_m , only : assert implicit none contains module procedure construct new_string % string_ = string end procedure module procedure as_character raw_string = self % string_ end procedure module procedure is_allocated string_allocated = allocated ( self % string_ ) end procedure module procedure from_default_integer integer , parameter :: sign_width = 1 , digits_width = range ( i ) + 1 character ( len = digits_width + sign_width ) characters write ( characters , '(i0)' ) i string = string_t ( characters ) end procedure module procedure from_real character ( len = 100 ) characters write ( characters , '(g0)' ) x string = string_t ( characters ) end procedure module procedure concatenate_elements integer s concatenated_strings = \"\" do s = 1 , size ( strings ) concatenated_strings = concatenated_strings // strings ( s )% string () end do end procedure module procedure array_of_strings character ( len = :), allocatable :: remainder , next_string integer next_delimiter , string_end remainder = trim ( adjustl ( delimited_strings )) allocate ( strings_array ( 0 )) do next_delimiter = index ( remainder , delimiter ) string_end = merge ( len ( remainder ), next_delimiter - 1 , next_delimiter == 0 ) next_string = trim ( adjustl ( remainder (: string_end ))) if ( len ( next_string ) == 0 ) exit strings_array = [ strings_array , string_t ( next_string )] if ( next_delimiter == 0 ) then remainder = \"\" else remainder = trim ( adjustl ( remainder ( next_delimiter + 1 :))) end if end do end procedure module procedure get_json_key character ( len = :), allocatable :: raw_line raw_line = self % string () associate ( opening_key_quotes => index ( raw_line , '\"' ), separator => index ( raw_line , ':' )) associate ( closing_key_quotes => opening_key_quotes + index ( raw_line ( opening_key_quotes + 1 :), '\"' )) unquoted_key = string_t ( trim ( raw_line ( opening_key_quotes + 1 : closing_key_quotes - 1 ))) end associate end associate end procedure module procedure file_extension character ( len = :), allocatable :: name_ name_ = trim ( adjustl ( self % string ())) associate ( dot_location => index ( name_ , '.' , back = . true .) ) if ( dot_location < len ( name_ )) then extension = trim ( adjustl ( name_ ( dot_location + 1 :))) else extension = \"\" end if end associate end procedure module procedure base_name character ( len = :), allocatable :: name_ name_ = self % string () associate ( dot_location => index ( name_ , '.' , back = . true .) ) if ( dot_location < len ( name_ )) then base = trim ( adjustl ( name_ ( 1 : dot_location - 1 ))) else base = \"\" end if end associate end procedure module procedure get_json_real character ( len = :), allocatable :: raw_line , string_value call assert ( key == self % get_json_key (), \"string_s(get_json_real): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if read ( string_value , fmt =* ) value_ end associate end associate end procedure module procedure get_json_string character ( len = :), allocatable :: raw_line call assert ( key == self % get_json_key (), \"key==self%get_string_json()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( opening_value_quotes => index ( text_after_colon , '\"' )) associate ( closing_value_quotes => opening_value_quotes + index ( text_after_colon ( opening_value_quotes + 1 :), '\"' )) if ( any ([ opening_value_quotes , closing_value_quotes ] == 0 )) then value_ = string_t ( trim ( adjustl (( text_after_colon )))) else value_ = string_t ( text_after_colon ( opening_value_quotes + 1 : closing_value_quotes - 1 )) end if end associate end associate end associate end procedure module procedure get_json_logical character ( len = :), allocatable :: raw_line , string_value call assert ( key == self % get_json_key (), \"string_s(get_json_logical): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if call assert ( string_value == \"true\" . or . string_value == \"false\" , & 'string_s(get_json_logical): string_value==\"true\" .or. string_value=\"false\"' , string_value ) value_ = string_value == \"true\" end associate end associate end procedure module procedure get_json_integer character ( len = :), allocatable :: raw_line , string_value call assert ( key == self % get_json_key (), \"string_s(get_json_logical): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if read ( string_value , fmt =* ) value_ end associate end associate end procedure module procedure get_json_integer_array value_ = int ( self % get_json_real_array ( key , mold = [ 0. ])) end procedure module procedure get_json_real_array character ( len = :), allocatable :: raw_line real , allocatable :: real_array (:) integer i call assert ( key == self % get_json_key (), \"string_s(get_json_{real,integer}_array): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( colon => index ( raw_line , \":\" )) associate ( opening_bracket => colon + index ( raw_line ( colon + 1 :), \"[\" )) associate ( closing_bracket => opening_bracket + index ( raw_line ( opening_bracket + 1 :), \"]\" )) associate ( commas => count ( \",\" == [( raw_line ( i : i ), i = opening_bracket + 1 , closing_bracket - 1 )])) associate ( num_inputs => commas + 1 ) allocate ( real_array ( num_inputs )) read ( raw_line ( opening_bracket + 1 : closing_bracket - 1 ), fmt =* ) real_array value_ = real_array end associate end associate end associate end associate end associate end procedure module procedure string_t_eq_string_t lhs_eq_rhs = lhs % string () == rhs % string () end procedure module procedure string_t_eq_character lhs_eq_rhs = lhs % string () == rhs end procedure module procedure character_eq_string_t lhs_eq_rhs = lhs == rhs % string () end procedure module procedure string_t_ne_string_t lhs_ne_rhs = lhs % string () /= rhs % string () end procedure module procedure string_t_ne_character lhs_ne_rhs = lhs % string () /= rhs end procedure module procedure character_ne_string_t lhs_ne_rhs = lhs /= rhs % string () end procedure module procedure assign_string_t_to_character lhs = rhs % string () end procedure module procedure assign_character_to_string_t lhs % string_ = rhs end procedure module procedure string_t_cat_string_t lhs_cat_rhs = string_t ( lhs % string_ // rhs % string_ ) end procedure module procedure string_t_cat_character lhs_cat_rhs = string_t ( lhs % string_ // rhs ) end procedure module procedure character_cat_string_t lhs_cat_rhs = string_t ( lhs // rhs % string_ ) end procedure end submodule julienne_string_s","tags":"","loc":"sourcefile/julienne_string_s.f90.html"},{"title":"julienne_test_result_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_result_s.f90~~EfferentGraph sourcefile~julienne_test_result_s.f90 julienne_test_result_s.F90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_test_result_m ) julienne_test_result_s use julienne_user_defined_collectives_m , only : co_all implicit none contains module procedure construct_from_character test_result % description_ = description test_result % passed_ = passed end procedure module procedure construct_from_string test_result % description_ = description test_result % passed_ = passed end procedure module procedure characterize characterization = trim ( merge ( \"passes on \" , \"FAILS on  \" , self % passed_ )) // \" \" // trim ( self % description_ % string ()) // \".\" end procedure module procedure passed test_passed = self % passed_ #ifndef __flang__ call co_all ( test_passed ) #endif end procedure module procedure description_contains substring_found = index ( self % description_ % string (), substring % string ()) /= 0 end procedure end submodule julienne_test_result_s","tags":"","loc":"sourcefile/julienne_test_result_s.f90.html"},{"title":"julienne_test_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_s.f90~~EfferentGraph sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_test_s.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.f90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_test_m ) julienne_test_s use julienne_user_defined_collectives_m , only : co_all use julienne_command_line_m , only : command_line_t implicit none contains module procedure report #ifndef __flang__ associate ( me => this_image ()) #else integer me me = 1 #endif if ( me == 1 ) then first_report : & if (. not . allocated ( test_description_substring )) then block type ( command_line_t ) command_line test_description_substring = command_line % flag_value ( \"--contains\" ) end block if ( len ( test_description_substring ) == 0 ) then print * , \"Running all tests.\" print * , \"(Add '-- --contains <string>' to run only tests with subjects or descriptions containing the specified string.)\" else print * , \"Running only tests with subjects or descriptions containing '\" , test_description_substring , \"'.\" end if end if first_report print * , new_line ( 'a' ), test % subject () end if #ifndef __flang__ call co_broadcast ( test_description_substring , source_image = 1 ) #endif #ifndef _CRAYFTN associate ( test_results => test % results ()) associate ( num_tests => size ( test_results )) tests = tests + num_tests if ( me == 1 ) then block integer i do i = 1 , num_tests if ( me == 1 ) print * , \"   \" , test_results ( i )% characterize () end do end block end if block logical , allocatable :: passing_tests (:) passing_tests = test_results % passed () #ifndef __flang__ call co_all ( passing_tests ) #endif associate ( num_passes => count ( passing_tests )) if ( me == 1 ) print '(a,2(i0,a))' , \" \" , num_passes , \" of \" , num_tests , \" tests pass.\" passes = passes + num_passes end associate end block end associate #ifndef __flang__ end associate #endif #else block logical , allocatable :: passing_tests (:) type ( test_result_t ), allocatable :: test_results (:) integer i test_results = test % results () associate ( num_tests => size ( test_results )) tests = tests + num_tests if ( me == 1 ) then do i = 1 , num_tests if ( me == 1 ) print * , \"   \" , test_results ( i )% characterize () end do end if passing_tests = test_results % passed () call co_all ( passing_tests ) associate ( num_passes => count ( passing_tests )) if ( me == 1 ) print '(a,2(i0,a))' , \" \" , num_passes , \" of \" , num_tests , \" tests pass.\" passes = passes + num_passes end associate end associate end block #endif end associate end procedure end submodule julienne_test_s","tags":"","loc":"sourcefile/julienne_test_s.f90.html"},{"title":"julienne_command_line_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_command_line_s.f90~~EfferentGraph sourcefile~julienne_command_line_s.f90 julienne_command_line_s.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_command_line_s.f90->sourcefile~julienne_command_line_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_command_line_m ) julienne_command_line_s implicit none contains module procedure argument_present !! list of acceptable arguments !! sample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"] !! where dashes support Linux/macOS and slashes support Windows integer :: i , argnum , arglen !! loop counter, argument position, argument length character ( len = 32 ) arg !! argument position !! acceptable argument lengths (used to preclude extraneous trailing characters) associate ( acceptable_length => [( len ( trim ( acceptable_argument ( i ))), i = 1 , size ( acceptable_argument ))]) found = . false . do argnum = 1 , command_argument_count () call get_command_argument ( argnum , arg , arglen ) if ( any ( & [( arg == acceptable_argument ( i ) . and . arglen == acceptable_length ( i ), i = 1 , size ( acceptable_argument ))] & )) then found = . true . end if end do end associate end procedure module procedure flag_value integer argnum , arglen , flag_value_length character ( len = :), allocatable :: arg associate ( argcount => command_argument_count ()) if ( argcount == 0 ) then flag_value = \"\" else flag_search : & do argnum = 1 , argcount if ( allocated ( arg )) deallocate ( arg ) call get_command_argument ( argnum , length = arglen ) allocate ( character ( len = arglen ) :: arg ) call get_command_argument ( argnum , arg ) if ( arg == flag ) then call get_command_argument ( argnum + 1 , length = flag_value_length ) allocate ( character ( len = flag_value_length ) :: flag_value ) call get_command_argument ( argnum + 1 , flag_value ) exit flag_search end if end do flag_search end if end associate end procedure end submodule","tags":"","loc":"sourcefile/julienne_command_line_s.f90.html"},{"title":"julienne_file_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_file_m.f90~~EfferentGraph sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_file_m.f90~~AfferentGraph sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_file_s.f90 julienne_file_s.f90 sourcefile~julienne_file_s.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~check-command-line-argument.f90 check-command-line-argument.f90 sourcefile~check-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-flag-value.f90 get-flag-value.f90 sourcefile~get-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~handle-missing-flag.f90 handle-missing-flag.f90 sourcefile~handle-missing-flag.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module julienne_file_m !! A representation of a file as an object use julienne_string_m , only : string_t private public :: file_t type file_t private type ( string_t ), allocatable :: lines_ (:) contains procedure :: lines procedure :: write_lines end type interface file_t module function read_lines ( file_name ) result ( file_object ) implicit none type ( string_t ), intent ( in ) :: file_name type ( file_t ) file_object end function pure module function construct ( lines ) result ( file_object ) implicit none type ( string_t ), intent ( in ) :: lines (:) type ( file_t ) file_object end function end interface interface pure module function lines ( self ) result ( my_lines ) implicit none class ( file_t ), intent ( in ) :: self type ( string_t ), allocatable :: my_lines (:) end function impure elemental module subroutine write_lines ( self , file_name ) implicit none class ( file_t ), intent ( in ) :: self type ( string_t ), intent ( in ), optional :: file_name end subroutine end interface end module julienne_file_m","tags":"","loc":"sourcefile/julienne_file_m.f90.html"},{"title":"julienne_formats_m.F90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_formats_m.f90~~AfferentGraph sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_formats_s.f90 julienne_formats_s.F90 sourcefile~julienne_formats_s.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~check-command-line-argument.f90 check-command-line-argument.f90 sourcefile~check-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-flag-value.f90 get-flag-value.f90 sourcefile~get-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~handle-missing-flag.f90 handle-missing-flag.f90 sourcefile~handle-missing-flag.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_formats_m !! Useful strings for formatting `print` and `write` statements implicit none character ( len =* ), parameter :: csv = \"(*(G0,:,','))\" !! comma-separated values character ( len =* ), parameter :: cscv = \"(*('(',G0,',',G0,')',:,',')))\" !! comma-separated complex values #ifndef _CRAYFTN interface pure module function separated_values ( separator , mold ) result ( format_string ) character ( len =* ), intent ( in ) :: separator class ( * ), intent ( in ) :: mold (..) character ( len = :), allocatable :: format_string end function end interface #else interface separated_values pure module function separated_values_1D ( separator , mold ) result ( format_string ) character ( len =* ), intent ( in ) :: separator class ( * ), intent ( in ) :: mold (:) character ( len = :), allocatable :: format_string end function end interface #endif end module julienne_formats_m","tags":"","loc":"sourcefile/julienne_formats_m.f90.html"},{"title":"check-command-line-argument.f90 – Julienne","text":"This file depends on sourcefile~~check-command-line-argument.f90~~EfferentGraph sourcefile~check-command-line-argument.f90 check-command-line-argument.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~check-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program check_command_line_argument !! This program serves the dual purposes of !! 1. Showing how to use the command_line_t derived type to check whether a !!    command-line argument is present and !! 2. Supporting the test suite verification of this same behavior. !! !! Running this program as follows with the command !! !! fpm run --example check-command-line-argument -- --some-argument !! !! should result in normal termination. use assert_m , only : assert use julienne_m , only : command_line_t implicit none type ( command_line_t ) command_line logical argument_passed argument_passed = command_line % argument_present ([ \"--some-argument\" ]) call assert ( argument_passed , \"check_command_line_argument: argument present\" ) end program","tags":"","loc":"sourcefile/check-command-line-argument.f90.html"},{"title":"julienne_user_defined_collectives_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_user_defined_collectives_s.f90~~EfferentGraph sourcefile~julienne_user_defined_collectives_s.f90 julienne_user_defined_collectives_s.F90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_user_defined_collectives_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! submodule ( julienne_user_defined_collectives_m ) julienne_user_defined_collectives_s implicit none contains module procedure co_all #ifndef __flang__ call co_reduce ( boolean , both ) #endif contains pure function both ( lhs , rhs ) result ( lhs_and_rhs ) logical , intent ( in ) :: lhs , rhs logical lhs_and_rhs lhs_and_rhs = lhs . and . rhs end function end procedure end submodule julienne_user_defined_collectives_s","tags":"","loc":"sourcefile/julienne_user_defined_collectives_s.f90.html"},{"title":"julienne_string_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_string_m.f90~~AfferentGraph sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_string_s.f90 julienne_string_s.f90 sourcefile~julienne_string_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~check-command-line-argument.f90 check-command-line-argument.f90 sourcefile~check-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-flag-value.f90 get-flag-value.f90 sourcefile~get-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~handle-missing-flag.f90 handle-missing-flag.f90 sourcefile~handle-missing-flag.f90->sourcefile~julienne_m.f90 sourcefile~julienne_file_s.f90 julienne_file_s.f90 sourcefile~julienne_file_s.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.f90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_s.f90 julienne_test_result_s.F90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_s.f90 julienne_vector_test_description_s.f90 sourcefile~julienne_vector_test_description_s.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_string_m use assert_m , only : characterizable_t implicit none private public :: string_t public :: array_of_strings public :: operator (. cat .) ! element-wise concatenation operator type , extends ( characterizable_t ) :: string_t private character ( len = :), allocatable :: string_ contains procedure :: as_character generic :: string => as_character procedure :: is_allocated procedure :: get_json_key procedure :: file_extension procedure :: base_name generic :: operator ( // ) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t generic :: operator ( /= ) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t generic :: operator ( == ) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t generic :: assignment ( = ) => assign_string_t_to_character , assign_character_to_string_t generic :: get_json_value => get_json_integer_array , get_json_logical , get_json_integer , get_json_string , get_json_real , & get_json_real_array procedure , private :: get_json_integer_array , get_json_logical , get_json_integer , get_json_string , get_json_real , & get_json_real_array procedure , private :: string_t_ne_string_t , string_t_ne_character procedure , private :: string_t_eq_string_t , string_t_eq_character procedure , private :: assign_character_to_string_t procedure , private :: string_t_cat_string_t , string_t_cat_character procedure , private , pass ( rhs ) :: character_cat_string_t procedure , private , pass ( rhs ) :: character_ne_string_t procedure , private , pass ( rhs ) :: character_eq_string_t procedure , private , pass ( rhs ) :: assign_string_t_to_character end type interface string_t elemental module function construct ( string ) result ( new_string ) implicit none character ( len =* ), intent ( in ) :: string type ( string_t ) new_string end function elemental module function from_default_integer ( i ) result ( string ) implicit none integer , intent ( in ) :: i type ( string_t ) string end function elemental module function from_real ( x ) result ( string ) implicit none real , intent ( in ) :: x type ( string_t ) string end function end interface interface operator (. cat .) pure  module function concatenate_elements ( strings ) result ( concatenated_strings ) implicit none type ( string_t ), intent ( in ) :: strings (:) type ( string_t ) concatenated_strings end function end interface interface pure module function as_character ( self ) result ( raw_string ) implicit none class ( string_t ), intent ( in ) :: self character ( len = :), allocatable :: raw_string end function pure module function array_of_strings ( delimited_strings , delimiter ) result ( strings_array ) implicit none character ( len =* ), intent ( in ) :: delimited_strings , delimiter type ( string_t ), allocatable :: strings_array (:) end function elemental module function is_allocated ( self ) result ( string_allocated ) implicit none class ( string_t ), intent ( in ) :: self logical string_allocated end function elemental module function get_json_key ( self ) result ( unquoted_key ) implicit none class ( string_t ), intent ( in ) :: self type ( string_t ) unquoted_key end function elemental module function file_extension ( self ) result ( extension ) !! result contains all characters in file_name after the last dot (.) class ( string_t ), intent ( in ) :: self type ( string_t ) extension end function pure module function base_name ( self ) result ( base ) !! result contains all characters in file_name before the last dot (.) class ( string_t ), intent ( in ) :: self type ( string_t ) base end function pure module function get_json_real ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key real , intent ( in ) :: mold real value_ end function elemental module function get_json_string ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key , mold type ( string_t ) :: value_ end function pure module function get_json_integer ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key integer , intent ( in ) :: mold integer value_ end function elemental module function get_json_logical ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key logical , intent ( in ) :: mold logical value_ end function pure module function get_json_integer_array ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key integer , intent ( in ) :: mold (:) integer , allocatable :: value_ (:) end function pure module function get_json_real_array ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key real , intent ( in ) :: mold (:) real , allocatable :: value_ (:) end function elemental module function string_t_eq_string_t ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs logical lhs_eq_rhs end function elemental module function string_t_eq_character ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs logical lhs_eq_rhs end function elemental module function character_eq_string_t ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len =* ), intent ( in ) :: lhs logical lhs_eq_rhs end function elemental module function string_t_ne_string_t ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs logical lhs_ne_rhs end function elemental module function string_t_ne_character ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs logical lhs_ne_rhs end function elemental module function character_ne_string_t ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len =* ), intent ( in ) :: lhs logical lhs_ne_rhs end function pure module function string_t_cat_string_t ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs type ( string_t ) lhs_cat_rhs end function pure module function string_t_cat_character ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs type ( string_t ) lhs_cat_rhs end function pure module function character_cat_string_t ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none character ( len =* ), intent ( in ) :: lhs class ( string_t ), intent ( in ) :: rhs type ( string_t ) lhs_cat_rhs end function pure module subroutine assign_character_to_string_t ( lhs , rhs ) implicit none class ( string_t ), intent ( inout ) :: lhs character ( len =* ), intent ( in ) :: rhs end subroutine pure module subroutine assign_string_t_to_character ( lhs , rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len = :), intent ( out ), allocatable :: lhs end subroutine end interface end module julienne_string_m","tags":"","loc":"sourcefile/julienne_string_m.f90.html"},{"title":"julienne_vector_test_description_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_vector_test_description_m.f90~~EfferentGraph sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_vector_test_description_m.f90~~AfferentGraph sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_vector_test_description_s.f90 julienne_vector_test_description_s.f90 sourcefile~julienne_vector_test_description_s.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~check-command-line-argument.f90 check-command-line-argument.f90 sourcefile~check-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-flag-value.f90 get-flag-value.f90 sourcefile~get-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~handle-missing-flag.f90 handle-missing-flag.f90 sourcefile~handle-missing-flag.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_vector_test_description_m !! Define an abstraction for describing test intentions and array-valued test functions use julienne_string_m , only : string_t use julienne_test_result_m , only : test_result_t use assert_m , only : assert implicit none private public :: vector_test_description_t public :: vector_function_strategy_t abstract interface function vector_function_i () result ( passes ) implicit none logical , allocatable :: passes (:) end function end interface type , abstract :: vector_function_strategy_t contains procedure ( vector_function_i ), deferred , nopass :: vector_function end type type vector_test_description_t !! Encapsulate test descriptions and vector-valued test functions private type ( string_t ), allocatable :: description_vector_ (:) class ( vector_function_strategy_t ), allocatable :: vector_function_strategy_ contains procedure run procedure contains_text end type interface vector_test_description_t module function construct ( description_vector , vector_function_strategy ) result ( vector_test_description ) !! The result is a vector_test_description_t object with the components defined by the dummy arguments implicit none type ( string_t ), intent ( in ) :: description_vector (:) class ( vector_function_strategy_t ), intent ( in ) :: vector_function_strategy type ( vector_test_description_t ) vector_test_description end function end interface interface impure module function run ( self ) result ( test_results ) !! The result encapsulates the test description and test outcome implicit none class ( vector_test_description_t ), intent ( in ) :: self type ( test_result_t ), allocatable :: test_results (:) end function module function contains_text ( self , substring ) result ( match_vector ) !! The result is .true. if the test description includes the value of substring implicit none class ( vector_test_description_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: substring logical , allocatable :: match_vector (:) end function end interface end module julienne_vector_test_description_m","tags":"","loc":"sourcefile/julienne_vector_test_description_m.f90.html"},{"title":"julienne_bin_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_bin_m.f90~~AfferentGraph sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_bin_s.f90 julienne_bin_s.f90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~check-command-line-argument.f90 check-command-line-argument.f90 sourcefile~check-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-flag-value.f90 get-flag-value.f90 sourcefile~get-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~handle-missing-flag.f90 handle-missing-flag.f90 sourcefile~handle-missing-flag.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module julienne_bin_m !! distribute item numbers across bins such that the number of items differs by at most 1 between any two bins implicit none private public :: bin_t type bin_t !! encapsulate a range of item numbers associated with a bin private integer first_ , last_ contains procedure first procedure last end type interface bin_t elemental module function construct ( num_items , num_bins , bin_number ) result ( bin ) !! the result is a bin associated with a range of item numbers integer , intent ( in ) :: num_items , num_bins , bin_number type ( bin_t ) bin end function end interface interface elemental module function first ( self ) result ( first_item_number ) !! the result is the first item number associated with the given bin implicit none class ( bin_t ), intent ( in ) :: self integer first_item_number end function elemental module function last ( self ) result ( last_item_number ) !! the result is the last item number associated with the given bin implicit none class ( bin_t ), intent ( in ) :: self integer last_item_number end function end interface end module julienne_bin_m","tags":"","loc":"sourcefile/julienne_bin_m.f90.html"},{"title":"julienne_test_description_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_description_s.f90~~EfferentGraph sourcefile~julienne_test_description_s.f90 julienne_test_description_s.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024, Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_test_description_m ) julienne_test_description_s implicit none contains module procedure construct_from_character test_description % description_ = description test_description % test_function_ => test_function end procedure module procedure construct_from_string_t test_description % description_ = description test_description % test_function_ => test_function end procedure module procedure run test_result = test_result_t ( self % description_ , self % test_function_ ()) end procedure module procedure contains_text match = index ( self % description_ % string (), substring % string ()) /= 0 end procedure module procedure equals lhs_eq_rhs = ( lhs % description_ == rhs % description_ ) . and . associated ( lhs % test_function_ , rhs % test_function_ ) end procedure end submodule julienne_test_description_s","tags":"","loc":"sourcefile/julienne_test_description_s.f90.html"},{"title":"julienne_user_defined_collectives_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_user_defined_collectives_m.f90~~AfferentGraph sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_s.f90 julienne_test_result_s.F90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_user_defined_collectives_s.f90 julienne_user_defined_collectives_s.F90 sourcefile~julienne_user_defined_collectives_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! module julienne_user_defined_collectives_m !! User-defined collective subroutines. implicit none interface impure elemental module subroutine co_all ( boolean ) !! If any image in a team calls this subroutine, then every image in the !! the same team must call this subroutine.  This subroutine sets the !! \"boolean\" argument .true. if it is true in all participating images !! upon entry and .false. otherwise. implicit none logical , intent ( inout ) :: boolean end subroutine end interface end module julienne_user_defined_collectives_m","tags":"","loc":"sourcefile/julienne_user_defined_collectives_m.f90.html"},{"title":"get-flag-value.f90 – Julienne","text":"This file depends on sourcefile~~get-flag-value.f90~~EfferentGraph sourcefile~get-flag-value.f90 get-flag-value.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~get-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program get_flag_value !! Demonstrate how to find the value of a command-line flag !! Running this program as follows with the command !! !! fpm run --example get-flag-value -- --input-file foo !! !! result in normal termination. use assert_m , only : assert use julienne_m , only : command_line_t implicit none type ( command_line_t ) command_line character ( len = :), allocatable :: input_file_name character ( len =* ), parameter :: expected_name = \"some_file_name\" input_file_name = command_line % flag_value ( \"--input-file\" ) call assert ( input_file_name == expected_name , \"get_flag_value: input_file_name==expected_name\" , diagnostic_data = input_file_name ) end program","tags":"","loc":"sourcefile/get-flag-value.f90.html"}]}